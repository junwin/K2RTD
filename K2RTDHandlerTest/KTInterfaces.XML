<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KTInterfaces</name>
    </assembly>
    <members>
        <member name="T:KaiTrade.Interfaces.AccountType">
            <summary>
            Defines the account type
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.Account">
            <summary>
             define the interface for an account object
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Account.FromXMLDB(KAI.kaitns.Account)">
            <summary>
            Set up account from an XML data binding
            </summary>
            <param name="myOrder"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Account.ToXMLDB">
            <summary>
            write account onto an XML data bining
            </summary>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.Account.VenueCode">
            <summary>
            Venue code the account applies to
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Account.LongName">
            <summary>
            Get set the long name for this account
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Account.AccountCode">
            <summary>
            Account code used on orders
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Account.FirmCode">
            <summary>
            Get/Set the firm that the account belongs to
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Account.AccountType">
            <summary>
            Type of account
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Account.InitialMargin">
            <summary>
            initial margine required for this account - depends on the
            number and type of products
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Account.MaintMargin">
            <summary>
            maintanace margine required for this account - depends on the
            number and type of products
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Account.NetLiquidity">
            <summary>
            Net liquidity of the account
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Account.AvailableFunds">
            <summary>
            NetLiq - initial margin
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Account.ExcessFunds">
            <summary>
            NetLiq - manint margin
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.AccountAllocation">
            <summary>
            Represents an individual account allocation, used when
            splitting an order over N accounts
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.AccountAllocation.FromXMLDB(KAI.kaitns.AccountAllocation)">
            <summary>
            set up from an XML databinding
            </summary>
            <param name="myAllocation"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.AccountAllocation.ToXMLDB">
            <summary>
            Return an XMLDB representation
            </summary>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.AccountAllocation.ID">
            <summary>
            unique id for the account allocation
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.AccountAllocation.Parent">
            <summary>
            Get/Set the parent allocation
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.AccountAllocation.ParentID">
            <summary>
            ID of the parent allocation (same as the parent ref)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.AccountAllocation.VenueCode">
            <summary>
            Get set the venue code for the allocation
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.AccountAllocation.AccountCode">
            <summary>
            Account code of this allocation
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.AccountAllocation.Ratio">
            <summary>
            ratio of total order to allocate 0..1
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.AccountAllocation.Amount">
            <summary>
            Ammount to allocate - note this overides percent
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.AccountAllocation.TranchSize">
            <summary>
            Max size of an individual order, this is used with the amount to 
            to place a set of orders to completly buy the allocation amount
            it should be less than the amount
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.AccountAllocation.Enabled">
            <summary>
            Is this line enabled
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.AccountAllocation.CumQty">
            <summary>
            Get the cummulative quantity of any orders
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.AccountAllocation.LeavesQty">
            <summary>
            Returns the qty working in the market for any orders 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.AccountAllocation.OrderGroup">
            <summary>
            Get/Set the group of orders associated with this accont allocation
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.AccountManager">
            <summary>
            Manage a set of accounts and provide access by trade venue
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.AccountManager.CreateAccount">
            <summary>
            create and register an account
            </summary>
            <returns>an account</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AccountManager.GetAccountID">
            <summary>
            Get a list of all account IDs
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AccountManager.GetAccountID(System.String,System.String)">
            <summary>
            Get a list of account ID's for a specific venue
            </summary>
            <param name="myVenueCode"></param>
            <param name="uid">system assigned user ID</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AccountManager.GetAccount(System.String)">
            <summary>
            Get an account
            </summary>
            <param name="myID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AccountManager.AddAccount(KAI.kaitns.Account)">
            <summary>
            Add an account based on a data binding version of the account
            </summary>
            <param name="myAccount"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.AccountManager.ToFile(System.String)">
            <summary>
            Write all account to a file of data bindings
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.AccountManager.FromFile(System.String)">
            <summary>
            Load/Add to the manager from a file of account databindings
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="T:KaiTrade.Interfaces.AlgoType">
            <summary>
            Used to determine the sort of a alogrithm held in an instance factory
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.AlgoManager">
            <summary>
            Provide a manager to get access to the different types of algo supported in KaiTrade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.AddInstanceFactory(KaiTrade.Interfaces.AlgoType,KaiTrade.Interfaces.K2InstanceFactory)">
            <summary>
            Add some external instance factory that will be used to create algos of a given type - this is used to allow
            plugins and other external assemblies register their oen algos
            </summary>
            <param name="algoType"></param>
            <param name="factory"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.RemoveInstanceFactory(KaiTrade.Interfaces.K2InstanceFactory)">
            <summary>
            Remove some external factory that is set up to create objects
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetORStrategyAlgorithm(System.String)">
            <summary>
            Get an order routing alg 
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetORStrategyAlgorithmNames">
            <summary>
            Return a list of ORStrategyAlgorithm names
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetTriggerOrder(System.String)">
            <summary>
            Get a triggered order of the type specified - e.g. trailing stops etc
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetTriggerOrderNames">
            <summary>
            Get a list of available trigger orders classes that can be used
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetPriceAlg(System.String)">
            <summary>
            Get an product pricing alg
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetPriceAlgNames">
            <summary>
            get a list of available price calc names
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetSyntheticPriceCalc(System.String)">
            <summary>
            Get a named synthetic price calculation 
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetSyntheticPriceCalcNames">
            <summary>
            Return a list of available SyntheticPriceCalcs
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetPriceAgregator(System.String)">
            <summary>
            Get a named algo used to agregate raw price data
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetDisplayControl(System.String)">
            <summary>
            Get a named display control
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetDisplayControlNames">
            <summary>
            Get a list of the avaiable control names
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetStatExpression(System.String)">
            <summary>
            Get a named statistical algo
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetStatExpressionNames">
            <summary>
            Return a list of expressions 
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetPatternMatcher(System.String)">
            <summary>
            Get a pattern matcher for use on a TS Set
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AlgoManager.GetPatternMatcherNames">
            <summary>
            Return a list of patter matchers
            </summary>
            <returns></returns>
        </member>
        <member name="T:KaiTrade.Interfaces.Allocation">
            <summary>
            Represents an allocation based on a set of accounts
            used to split an order - the implimenting class will contain a
            set of AccountAllocations
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Allocation.GetTotalRatioAllocated">
            <summary>
            Returns the total ratio allocated - ideally this is 100
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Allocation.RecalcAmounts(System.Double)">
            <summary>
            Apply the size to the ratios to get an ammount for
            each account line
            </summary>
            <param name="mySize"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Allocation.SetRatioFromAmounts">
            <summary>
            Set ratios from amounts specified
            </summary>
            <returns>total of all amounts</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Allocation.ReverseOrder">
            <summary>
            Reverse the order of the account allocations
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Allocation.CreateAccountAllocation(System.String)">
            <summary>
            Create an empty account allocation and add it to the allocation
            </summary>
            <param name="myAccountCode"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Allocation.InsertCreateAccountAllocation(System.String,System.Int32)">
            <summary>
            Create an empty account allocation and insert it in the allocations after the index specified
            </summary>
            <param name="myAccountCode"></param>
            <param name="myPos">0 based index where the account alloc will be inserted</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Allocation.FromXMLDB(KAI.kaitns.Allocation)">
            <summary>
            set up from an XML databinding
            </summary>
            <param name="myAllocation"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Allocation.FromXMLDB(KAI.kaitns.Allocation,System.Boolean)">
            <summary>
            set up from an XML databinding - opyionally leaving the ID 
            
            </summary>
            <param name="myAllocation"></param>
            <param name="replaceID">if true  replace the ID</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Allocation.ToXMLDB">
            <summary>
            Return an XMLDB representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Allocation.GetAccountAllocation(System.String)">
            <summary>
            Get the account allocation for the ID passed or return null
            </summary>
            <param name="myID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Allocation.Remove(System.String)">
            <summary>
            Remove the account allocation specified by the ID passed
            </summary>
            <param name="myID"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.Allocation.ID">
            <summary>
            unique ID for this allocation
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Allocation.Name">
            <summary>
            Friendly name
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Allocation.Mnemonic">
            <summary>
            Mnemonic currently used
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Allocation.MinOrderSize">
            <summary>
            Set the min order size for this allocation
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Allocation.TotalQty">
            <summary>
            Get/Set the total qty for the allocation
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Allocation.Items">
            <summary>
            Get/Set a list of account allocations used by this 
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.AllocationManager">
            <summary>
            Manages a set of allocations
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.AllocationManager.CreateAllocation(System.String)">
            <summary>
            Create an empty allocation and add it to the manager
            </summary>
            <param name="myName"> name of desired allocation</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AllocationManager.GetAllocation(System.String)">
            <summary>
            Get an allocation by name
            </summary>
            <param name="myName"> name of desired allocation</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AllocationManager.GetAllocationID(System.String)">
            <summary>
            Get an allocation by ID
            </summary>
            <param name="myID"> ID of desired allocation</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AllocationManager.CloneAllocation(System.String)">
            <summary>
            Get a clone of a named allocation - caution this will be
            identical in all respects except for the identity
            </summary>
            <param name="myName"> name of desired allocation</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AllocationManager.CloneAllocationID(System.String)">
            <summary>
            Get a clone of the allocation with the ID specified - this will be
            identical in all respects except for the identity
            </summary>
            <param name="myName"> name of desired allocation</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AllocationManager.GetAllocationNames">
            <summary>
            get a list of allocation ID's
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.AllocationManager.FromXMLDB(KAI.kaitns.AllocationSet)">
            <summary>
            set up from an XML databinding
            </summary>
            <param name="myAllocation"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.AllocationManager.ToXMLDB">
            <summary>
            Return an XMLDB representation
            </summary>
            <returns></returns>
        </member>
        <member name="T:KaiTrade.Interfaces.Client">
            <summary>
            Provides an interface that is implimented by objects that want to 
            receive messaged - this normally used to subscribe to updates from the
            application facade. See also the Subscriber interface used for prices
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Client.OnStatusMessage(KaiTrade.Interfaces.Message)">
            <summary>
            Handle a status message sent to the client
            </summary>
            <param name="myMessage">KTA Message to process</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Client.OnMessage(KaiTrade.Interfaces.Message)">
            <summary>
            Handle a general message sent to the client
            </summary>
            <param name="myMessage">KTA Message to process</param>
        </member>
        <member name="T:KaiTrade.Interfaces.RTDConnectionState">
            <summary>
            RTD connection state
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.DisplayControlType">
            <summary>
            decribes the type of display control - product controls can
            be launched from different parts of the system where a product list is shown
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.DisplayControl">
            <summary>
            Defines the interface for some type of visiblecontrol
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.DisplayControl.SetMnemonic(System.String)">
            <summary>
            Set the mnemonic
            </summary>
            <param name="mnemonic"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.DisplayControl.Start(System.String)">
            <summary>
            Start the control
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.DisplayControl.Stop">
            <summary>
            Stop the control
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.DisplayControl.Control">
            <summary>
            The control itself
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.DisplayControl.DisplayControlType">
            <summary>
            the type of control
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.DisplayControl.LongDescripton">
            <summary>
            get the controls long description used on pop up menues
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.Driver">
            <summary>
            Defines the interface a drive(broker connection) must impliment to be loaded and used from
            KaiTrade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.ProcessOrders(System.String,System.String[])">
            <summary>
            Process a set of order - this is driver specific and used to provide
            some access to specific driver functions - it should be avoided as it will
            be depricated
            </summary>
            <param name="cmdName"></param>
            <param name="orderIds"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.Send(KaiTrade.Interfaces.Message)">
            <summary>
            Send a message - the driver needs to process this message
            the Message usually wraps a FIX message for trading
            </summary>
            <param name="myMsg"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.Register(System.String,KaiTrade.Interfaces.Client)">
            <summary>
            Register some client to receive messages - note use a subject for prices
            </summary>
            <param name="myClient"> object that will receieve messages</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.UnRegister(KaiTrade.Interfaces.Client)">
            <summary>
            Unregister some client
            </summary>
            <param name="myClient">client that will be unregistered</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.Register(KaiTrade.Interfaces.Publisher,System.Int32,System.String)">
            <summary>
            Register some subject to receive images and updates - usually for prices
            </summary>
            <param name="myPublisher">a publisher that the driver will use to publish updates for the 
            publisher topic</param>
            <param name="depthLevels">How many levels of depth - 0 => none, not all drivers support depth</param>
            <param name="requestID">ID that is associated with the request</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.UnRegister(KaiTrade.Interfaces.Publisher)">
            <summary>
            Unregister some subject
            </summary>
            <param name="myClient">subject that will be unregistered</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.GetProduct(System.String)">
            <summary>
            Request that a driver opens/subscribes to a product 
            </summary>
            <param name="myProductXml">string of XML that defines the product</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.GetProduct(KaiTrade.Interfaces.TradableProduct,System.String)">
            <summary>
            Request that a driver opens/subscribes to a product 
            </summary>
            <param name="myProduct">Tradable product - to get or request</param>
            <param name="myGenericName">The generic name for the product - i.e. not time sensitive
             for example the  emini can be refered to as EP in CQG, it then may resolve to
             EPM9, EPZ9  .... depending on which is the active front contract</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.RequestProductDetails(KaiTrade.Interfaces.TradableProduct)">
            <summary>
            Request the product details, get the driver to access the product and fill in 
            product details in the kaitrade product object.
            Note that not all drivers support this and that the call may take some
            time to set the values i.e. it is not syncronous
            </summary>
            <param name="myProduct"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.GetTradeDestinations(System.String)">
            <summary>
            Get a list of the available trade destinations for the cficode specified
            note that a market code represents some tradable market/exchange supported by the driver
            </summary>
            <param name="venueCode"> Cficode - the asset class that the market supports(futures, options, fx etc), if empty all markets </param>
            <returns>a list of trade destinations supported by the driver</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.SetFacade(KaiTrade.Interfaces.Facade)">
            <summary>
            Set the APP Facade in the plugin - this lets the driver access the functions provided 
            by KaiTrade using the KaiTrade Facade
            </summary>
            <param name="myFacade"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.Start(System.String)">
            <summary>
            Start an adapter passing in any state needed - in this release
            the state is the working directory so an adapter can locate
            any other resources
            </summary>
            <param name="myState">string state data - this depends on the type od adapter</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.Stop">
            <summary>
            Stop the adapter
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.SetParent(KaiTrade.Interfaces.DriverManager)">
            <summary>
            Set the parent of the adapter - this will be some
            type of toolkit. This enables a particular adapter to 
            access that same set of facilities as the toolkit
            </summary>
            <param name="myParent"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.GetState">
            <summary>
            Get current state information - returns the state/config settings (XML) for the
            adapter
            </summary>
            <returns>XML databound driver object</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.StatusRequest">
            <summary>
            Request that all adapters report their status - the adapter returns the
            state through the status message that the client interface must support
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.RequestTSData(KaiTrade.Interfaces.TSSet)">
            <summary>
            Request a set of time series data - if supported
            </summary>
            <param name="myTSSet"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.RequestTradeSystems">
            <summary>
            Will request any trade systems that the driver supports - note that this
            is asyncronous the driver will add any trading systems using the Facade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.RequestConditions">
            <summary>
            Request any conditions that the driver supports- note that this
            is asyncronous the driver will add any conditions using the Facade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.DisconnectTSData(KaiTrade.Interfaces.TSSet)">
            <summary>
            Get a set of time series data - if supported
            </summary>
            <param name="myTSSet"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.ShowUI(System.Boolean)">
            <summary>
            Display or Hide any UI the driver has
            </summary>
            <param name="uiVisible">true => show UI, False => hide UI</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Driver.GetRunningStatus">
            <summary>
            Get the running status of some driver
            compliments the StatusRequest();
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Driver.LiveMarket">
            <summary>
            If set to true then run on the live market - not all drivers will obey this
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Driver.Name">
            <summary>
            Get the name of the adapter
            </summary>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.Driver.ID">
            <summary>
             ID of the Adapter
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Driver.Tag">
            <summary>
            Get/Set the tag - this is then returned on any message from the adapter
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Driver.Clients">
            <summary>
            Get a list of current clients - note an adapter may choose to 
            return an empty list
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Driver.Status">
            <summary>
            Get the state data for the driver - usually passed to the driver
            at start up from the provisioning
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Driver.Sessions">
            <summary>
            Get a list of sessions supported by the driver
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.StatusConditon">
            <summary>
            Defines the coarse status of some driver attribute
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.IDriverStatus">
            <summary>
            Defines an interface to provide a snapshot of
            a drivers status
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IDriverStatus.OrderRouting">
            <summary>
            Status of the order routing connection
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IDriverStatus.Prices">
            <summary>
            Status of the prices connection
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IDriverStatus.HistoricData">
            <summary>
            Status of the historic data connection
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.DriverManager">
            <summary>
            The driver manager loads and controls a set of drivers that can be used in 
            KaiTrade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.GetDriver(System.String)">
            <summary>
            Return a driver given its ID
            </summary>
            <param name="myName">ID of the desired adapter</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.GetDrivers">
            <summary>
            return an array of loaded drivers
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.RequestStautus">
            <summary>
            Issue a status request to all drivers - this causes them all to 
            respond to thier clients
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.Start">
            <summary>
            Issue a start request to all loaded drivers
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.Start(System.String)">
            <summary>
            Start an individual driver based on its ID
            </summary>
            <param name="myID"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.Stop">
            <summary>
            Stop all adapters
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.Stop(System.String)">
            <summary>
            Stop an individual driver based on its ID
            </summary>
            <param name="myID"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.Restart(System.String)">
            <summary>
            Restart an individual driver
            </summary>
            <param name="myID"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.Send(KaiTrade.Interfaces.Message)">
            <summary>
            Send a message to all adapters
            </summary>
            <param name="myMsg"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.DynamicLoad(System.String,System.String)">
            <summary>
            Dynamically Load a driver from the path specified
            </summary>
            <param name="myCode">code that will be assigned to the driver - overrides the driver code</param>
            <param name="myPath">path to the assembly</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.GetPublisher(System.String,System.String)">
            <summary>
            Get a subject used for publish subscribe
            </summary>
            <param name="myType">Type of Subject</param>
            <param name="myTopicID">publishers topic - what the publisher is about</param>
            <returns> a subject</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.GetMessageHelper">
            <summary>
            get the message helper that must be used with this driver manager
            the helper will format the various status messages from a driver
            into the form the driver manager wants
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.ApplyStatus(System.String)">
            <summary>
            Apply a driver status message and update any subscribed views
            </summary>
            <param name="myDSM"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.AddDriverDefinition(KAI.kaitns.Driver)">
            <summary>
            Add a driver definition - this records the existance of a 
            driver but does not load it.
            </summary>
            <param name="myDriver"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.AddDriver(KaiTrade.Interfaces.Driver)">
            <summary>
            Add a driver to the manager
            </summary>
            <param name="myDriver"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.GetDriverDefinition">
            <summary>
            Get the list of driver definitions
            </summary>
            <param name="myCode"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.RequestTradeSystems">
            <summary>
            Will request any trade systems that the driver supports - note that this
            is asyncronous the driver will add any trading systems using the Facade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.RequestConditions">
            <summary>
            Request any conditions that the driver supports- note that this
            is asyncronous the driver will add any conditions using the Facade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverManager.ShowUI(System.Boolean)">
            <summary>
            Display or Hide any UI the driver has
            </summary>
            <param name="uiVisible">true => show UI, False => hide UI</param>
        </member>
        <member name="P:KaiTrade.Interfaces.DriverManager.Facade">
            <summary>
            Provide access to the facade
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.DriverSession">
            <summary>
            Define some session running in a driver, this can be specific
            to the driver e.g. Data, OrderRouting, Prices or some type
            of FIX session for FIX based drivers
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.DriverSession.ToXMLDB">
            <summary>
            write session onto an XML data bining
            </summary>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.DriverSession.Key">
            <summary>
            Get the key for the session
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.DriverSession.DriverID">
            <summary>
            The driver ID that the session is for
            can be used to access the driver in its manager
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.DriverSession.DriverCode">
            <summary>
            The driver code(human readable) - this is for convenience
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.DriverSession.Name">
            <summary>
            Get the session name
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.DriverSession.Version">
            <summary>
            get the version(or FIX begin string) of the session
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.DriverSession.SID">
            <summary>
            Get the sender ID is any
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.DriverSession.TID">
            <summary>
            Get the target ID if any
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.DriverSession.Status">
            <summary>
             get the session status
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.DriverSession.StatusText">
            <summary>
            Get any session status text
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.FlashMessageType">
            <summary>
            Describes the type of message that will be flashed to the user
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.Facade">
            <summary>
            Represents the facade used to provide access to functions
            in KTA as a whole
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetInstanceName">
            <summary>
            Get the instance name for this running facade, needs to be unique the default
            facade will return K2+MachineName+":"+ instance count e.g. 
            K2JUPC:1
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetCurrentSessionCorrelationID(System.String)">
            <summary>
            Get the current session correlation ID for a particular user - the correlation id is used
            to send messages back to a client over some session
            </summary>
            <param name="userIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.AssociateUserSession(System.String,System.String)">
            <summary>
            Associate a user id with a correlation ID
            </summary>
            <param name="userIdentity"></param>
            <param name="correlationID"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetuserWithCorrelationID(System.String)">
            <summary>
            Get the user that corrsponds to a given correlationID
            </summary>
            <param name="correlationID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.Start">
            <summary>
            Start KT App components
            </summary>
            <param name="myPath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.LoadPlugins(System.String,KAI.kaitns.KTAPlugInCol)">
            <summary>
            Load a set of plugins given a data binding colection of plugins
            </summary>
            <param name="plugins"></param>
            <returns>number loaded</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.StartAllPlugins(System.String)">
            <summary>
            Start all plugins for a specified user
            </summary>
            <param name="uid"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.StopAllPlugins(System.String)">
            <summary>
            stop all plugins for a specified user
            </summary>
            <param name="uid"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.Stop">
            <summary>
            Stop KT App components
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.ProcessConfigXMLDB(KAI.kaitns.KTAppConfig)">
            <summary>
            Process a config data binding
            </summary>
            <param name="myConfig"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.DynamicLoad(System.String,System.String,System.String)">
            <summary>
            Dynamically load some plugin (visible or non visible)
            </summary>
            <param name="uid">user id </param>
            <param name="path">path to the plugin</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.SaveManagerData">
            <summary>
            Save manager data - based on paths in the config file
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.SendOR(KaiTrade.Interfaces.Message)">
            <summary>
            Send an order routing message to the relevant driver
            </summary>
            <param name="myMsg"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.OnDriverMessage(KaiTrade.Interfaces.Message)">
            <summary>
            Process a message from a driver - used optionally by clients of the facade
            </summary>
            <param name="myMsg"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.Register(System.String,KaiTrade.Interfaces.Client)">
            <summary>
            Register some client to receive messages - note use a subject for prices
            </summary>
            <param name="myClient"> object that will receieve messages</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.UnRegister(KaiTrade.Interfaces.Client)">
            <summary>
            Unregister some client
            </summary>
            <param name="myClient">client that will be unregistered</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.AddStrategy(System.String,System.String,System.String,System.String,System.Double,System.String,System.String,System.Collections.Generic.List{KaiTrade.Interfaces.K2Parameter})">
            <summary>
            Add a strategy to the strategy manager
            </summary>
            <param name="myMnemonic"></param>
            <param name="myName"></param>
            <param name="mySide"></param>
            <param name="myOrdType"></param>
            <param name="myQty"></param>
            <param name="myAccount"></param>
            <param name="mtStratType"></param>
            <param name="myParms">list of parameters</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.AddTriggerOrder(KaiTrade.Interfaces.Order,System.String,System.Collections.Generic.List{KaiTrade.Interfaces.K2Parameter})">
            <summary>
            Add a triggered order the triggered orders maanger based on the order passed in
            </summary>
            <param name="order">order to be triggered</param>
            <param name="orderType">type of order e.g. KTARGET</param>
            <param name="parms">extra parameters - depends on order type</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.AddTriggerOrder(KaiTrade.Interfaces.Order,System.String,System.String,System.Collections.Generic.List{KaiTrade.Interfaces.K2Parameter})">
            <summary>
            Add a triggered order the triggered orders maanger based on the order passed in
            </summary>
            <param name="order">order to be triggered</param>
            <param name="orderType">type of order e.g. KTARGET</param>
            <param name="targetOrderType">Type of order to submit when triggered</param>
            <param name="parms">extra parameters - depends on order type</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.SubmitOrder(System.String,System.String,System.Double,System.Double,System.String,System.String)">
            <summary>
            Place a simple order - returns the order ID
            </summary>
            <param name="myMnemonic">string Mnemonic for the product we want to order</param>
            <param name="myQty">order QTY</param>
            <param name="myPrice">price </param>
            <param name="mySide">Side Buy or Sell</param>
            <param name="myOrderType">type of order  Limit or Market</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.SubmitOrder(System.String,System.String,System.Double,System.Double,System.String,System.String,System.Double,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.Collections.Generic.List{KaiTrade.Interfaces.K2Parameter})">
            <summary>
            Place a simple order - returns the order ID
            </summary>
            <param name="myMnemonic">string Mnemonic for the product we want to order</param>
            <param name="myQty">order QTY</param>
            <param name="myPrice">price </param>
            <param name="mySide">Side Buy or Sell</param>
            <param name="myOrderType">type of order  Limit or Market</param>
            <param name="myTimeType">time type</param>
            <param name="DateTime">date if GTD or GTT</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.SubmitStrategyOrder(System.String,System.String,System.Double,System.Double,System.String,System.String)">
            <summary>
            Place a simple strategy order - returns the strategy name
            </summary>
            <param name="myMnemonic">string Mnemonic for the product we want to order</param>
            <param name="myQty">order QTY</param>
            <param name="myPrice">price </param>
            <param name="mySide">Side Buy or Sell</param>
            <param name="myOrderType">type of order  Limit or Market</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.SubmitStrategyOrder(System.String,KaiTrade.Interfaces.ORStrategyAlgorithm,System.String,System.Double,System.Double,System.Double,System.String,System.String,System.Double,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.Collections.Generic.List{KaiTrade.Interfaces.K2Parameter})">
            <summary>
            Place a simple strategy order - returns the strategy name
            </summary>
            <param name="myMnemonic">string Mnemonic for the product we want to order</param>
            <param name="myAlg">the algorithm to use on the strategy</param>
            <param name="myQty">order QTY</param>
            <param name="myQtyLimit">Maximum qty bought or sold for the strategy</param>
            <param name="myPrice">price </param>
            <param name="mySide">Side Buy or Sell</param>
            <param name="myOrderType">type of order  Limit or Market</param>
            <param name="myStopPx">stop price if order type is stop order else ignored</param>
            <param name="myTimeType">order time type</param>
            <param name="myDateTime">date and time for relvant time types</param>
            <param name="myAccount">account to be used - overrides the venue/product account</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.ExecuteStrategy(System.String)">
            <summary>
            Execute the strategy for the ID specified
            </summary>
            <param name="myID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.SubmitOrder(KaiTrade.Interfaces.Order)">
            <summary>
            submit a complete order for processing, note the order must have a 
            valid product and trade venue
            </summary>
            <param name="myOrder"></param>
            <returns>the order ID or empty string if failed</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.RenderOrderAsFix(QuickFix.Message@,KaiTrade.Interfaces.Message@,System.String@,KaiTrade.Interfaces.Order)">
            <summary>
            Render the given order into FIX
            </summary>
            <param name="myNOS"></param>
            <param name="myMsg"></param>
            <param name="myDriverCode"></param>
            <param name="myOrder"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.CancelOrder(System.String)">
            <summary>
            Cancel the order for the ID specified
            </summary>
            <param name="myID"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.CancelAllOrders">
            <summary>
            Cancel all orders
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.ReplaceOrder(System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Edit the order for the ID specified
            </summary>
            <param name="myID"></param>
            <param name="newQty">new qty if specified</param>
            <param name="newPrice">new price if specified</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.AddReplaceTradeSystem(KaiTrade.Interfaces.TradeSystem)">
            <summary>
            Add or replace a trading system - will store this in the tradesystem manager
            </summary>
            <param name="tradeSystem"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetAvailableTradeSystems(System.String)">
            <summary>
            Get a list of the trading systems avalable for some trade venue
            </summary>
            <param name="venue">if empty will return all systems</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.RequestTradeSystems">
            <summary>
            Will request any trade systems that the system supports - note that this
            is asyncronous the drivers will add any trading systems using the Facade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.RequestConditions">
            <summary>
            Request any conditions that the system supports- note that this
            is asyncronous the drivers will add any conditions using the Facade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.ProcessTradeSignal(System.String,System.String,System.String,KaiTrade.Interfaces.TradeSignal)">
            <summary>
            Process a Trade signal
            </summary>
            <param name="uid">System issued user id</param>
            <param name="strategyID">Name of the strategy</param>
            <param name="mySignal">trade signal to process</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.ProcessTradeSignal(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,KaiTrade.Interfaces.TradeSignal)">
            <summary>
            Process a trade signal using (or creating) the strategy name given in conjunction with the
            AlgoName specified.
            </summary>
            <param name="uid">System issued UserID</param>
            <param name="strategyName">Name of the strategy</param>
            <param name="runID">identifier for a specific run of this strategy</param>
            <param name="AlgoName">Name of the Execution Algo</param>
            <param name="account">account to be used for orders</param>
            <param name="CorrelationID">Correlation used to identify orders</param>
            <param name="autoCreate">if true then create a strategy if one does not exist</param>
            <param name="mySignal">Trade signal</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.RequestTSData(KaiTrade.Interfaces.TSSet)">
            <summary>
            Request a set of data and conditions using a TSSet - the mnemonic
            in the set will be used to select the relevant driver
            </summary>
            <param name="myTSSet">TS Set - this defines what will be retrieved</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.RequestTSData(System.String,System.String,System.String,System.Boolean,KaiTrade.Interfaces.TSPeriod,System.DateTime,System.Int64)">
            <summary>
            Simple Request for TS data - not all drivers support this
            </summary>
            <param name="uid">userid</param>
            <param name="requestID">user defined request ID</param>
            <param name="mnemonic">mnemonic used to select bar data</param>
            <param name="updatesRequired">if true will return updates</param>
            <param name="period">lenght  bars</param>
            <param name="start">start time - not used if number of bars LT 0</param>
            <param name="barCount">number of bars/intervals to return - if 0 all bar from start to current time, id -ve => last N bars</param>
            <returns>a TSData set </returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.DisconnectTSData(KaiTrade.Interfaces.TSSet)">
            <summary>
            Disconnect from data and conditions
            </summary>
            <param name="myTSSet"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetDriverRunningState(System.String)">
            <summary>
            Get the drivers running status
            </summary>
            <param name="driverID">the drivers code e.g. KTSIM</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetDriver(KaiTrade.Interfaces.TradableProduct)">
            <summary>
            get the driver that processes the specified product
            </summary>
            <param name="myProduct"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.CreateRegisterPublisherWithDriver(KaiTrade.Interfaces.PublisherType,System.String,System.String)">
            <summary>
            Create and register a publisher with some driver
            </summary>
            <param name="publisherType">general or prices</param>
            <param name="driverCode">valid driver code</param>
            <param name="topicName">topic (mnemonic name)</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.CreateRegisterPublisherWithDriver(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Create and register a publisher with some driver
            </summary>
            <param name="publisherType">name of type of publisher</param>
            <param name="driverCode">valid driver code</param>
            <param name="topicName">topic (mnemonic name)</param>
            <param name="depthLevels">number of depthLevels 0=> none, note not all drivers can do this</param>
            <param name="requestID">user defined ID</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetPXPublisher(System.String)">
            <summary>
            Get and subscribe to prices for the mnemonic specified, this will
            create a price publisher and open the instrument or return an existing
            publisher
            </summary>
            <param name="myMnemonic"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetSurrogatePublisher(System.String)">
            <summary>
            Return an instance of a publisher surrogate - will create the publisher
            if needed and register it in the publisher manager
            </summary>
            <param name="name">Name of the publisher</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.StartPrices(System.String,KaiTrade.Interfaces.Subscriber)">
            <summary>
            Start prices foe the mnemonic specified - this will 
            get the system to susbscribe to prices and update the
            product with prices
            </summary>
            <param name="myMnemonic"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.StopPrices(System.String,KaiTrade.Interfaces.Subscriber)">
            <summary>
            This will stop price updates for the product concenerd
            unless - other susbcriptions are open for the
            product
            </summary>
            <param name="myMnemonic"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetPriceSnapshot(System.String)">
            <summary>
            Get a snapshot of the current prices for some product
            </summary>
            <param name="mnemonic"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetTriggerPublisher">
            <summary>
            Get the publisher used for triggers
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.ConnectTriggers2Driver(System.String,System.String,KaiTrade.Interfaces.Publisher,System.String,System.String,System.String,System.Int32)">
            <summary>
            Connect the enter and exit fields in the publisher provided
            to conditons or signals in the driver specified - this will then 
            allow the driver to update these conditions.
            Note that the names used must correlate to names used in the driver, e.g. the name of
            a valid CQG condition
            </summary>
            <param name="myPub">publisher to get condition updates</param>
            <param name="myID">ID for query - allias in CQG</param>
            <param name="myEnterName">name of condition or tirgger (cqg condition) for enter</param>
            <param name="myExitName">name of condition or tirgger (cqg condition) for exit</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.PublishTriggerValue(System.String,System.String,System.Boolean)">
            <summary>
            Publish a trigger update
            </summary>
            <param name="myPubName"></param>
            <param name="myTriggerName"></param>
            <param name="myValue"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.CheckCreateMnemonic(System.String)">
            <summary>
            Check if a mnemonic exists and create it if not
            </summary>
            <param name="myMnemonic">a mnemonic </param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.CheckCreateMnemonic(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Check if a mnemonic exists and create it if not
            </summary>
            <param name="myMnemonic"></param>
            <param name="myVenue"> venue that trades the product</param>
            <param name="mySecID">a security id for the product</param>
            <param name="myExchange">exchange listing the product</param>
            <param name="ExDestination">exchnage that we will trade the product on e.g. IB SMART</param>
            <param name="myCFI">CFI code of the product</param>
            <param name="mmy">cantract expiration of empty string</param>
            <param name="strikePx">option strike price or empty string</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.AddProduct(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Boolean)">
            <summary>
            Add a product
            </summary>
            <param name="myUserName">users mnemonic - the product is assigned this mnemonic if specified</param>
            <param name="myVenueName">Product venue</param>
            <param name="myID">product id - broker specific</param>
            <param name="myExchange">Exchnage listing the product(part of the securoty definition) - if empty the default for the venue will be used</param>
            <param name="ExDestination">Exchange or venue traidng the product e.g. IB SMART</param>
            <param name="myCFI">CFI or empty</param>
            <param name="mmy">expiration YYYYMM  or YYYYMMDD depending on broker and CFI</param>
            <param name="myCurrency">Currency code or empty - takes venue default currency</param>
            <param name="strikePx">strike px or empty currency</param>
            <param name="doEvent">true => that we event client of change, false no events raised saves aa lot of processing</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.RequestProductDetails(KaiTrade.Interfaces.TradableProduct)">
            <summary>
            Request the product details, get the driver to access the product and fill in 
            product details in the kaitrade product object.
            Note that not all drivers support this and that the call may take some
            time to set the values.
            </summary>
            <param name="myProduct"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetTradeDestinations(System.String,System.String,System.String)">
            <summary>
            Get a list of the available trade destinations for the user and venue specified
            note that a trade destination represents some tradable market/exchange supported by the venue
            </summary>
            <param name="uid"> System assigned user id </param>
            <param name="venueCode"> Venue code </param>
            <param name="cfiCode"> Cficode - the asset class that the market supports(futures, options, fx etc), if empty all markets </param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.AddOrderOCO(KaiTrade.Interfaces.Order,System.String)">
            <summary>
            Add an order to a group of orders that comprise a set of OCO Orders
            </summary>
            <param name="?"></param>
            <param name="OCOGroupName"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetOCOOrders(System.String)">
            <summary>
            Get the list of orders that comprise an OCO scheme by thier oco group name
            </summary>
            <param name="OCOGroupName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.AddProduct(System.String,System.String)">
            <summary>
            Add a product to a venue using its generic name - for example EP in CQG, note
            that this usually asyncronous - the product will probably be populated
            some time later.
            </summary>
            <param name="myGenericName"></param>
            <param name="myVenueName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.UpdateLeg(System.String,System.String,System.Int32,System.String,System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Int32)">
            <summary>
            Update or Add a leg to the named ML product
            </summary>
            <param name="myMLName"></param>
            <param name="myMnemonic"></param>
            <param name="myQty"></param>
            <param name="mySide"></param>
            <param name="myOrdType"></param>
            <param name="myAccount"></param>
            <param name="myPriceOffset"></param>
            <param name="myMultiplier"></param>
            <param name="myDamper"></param>
            <param name="myQuoted"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.SetBag(System.Collections.Generic.List{KaiTrade.Interfaces.Field}@,System.String,System.String)">
            <summary>
            Set a field bag from a delimited string
            </summary>
            <param name="myFieldBag"></param>
            <param name="myFields"></param>
            <param name="myDelmiter"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.BagAsString(System.Collections.Generic.List{KaiTrade.Interfaces.Field},System.String)">
            <summary>
            Get a delimeted string containing the bag of field data
            </summary>
            <param name="myFieldBag"></param>
            <param name="myDelimiter"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetUserPropertySetXML">
            <summary>
            Get the user property set from storage - the storage method
            can vary
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetNextKTID">
            <summary>
            return the next kaitrade ID - unique in the run of KaiTrade
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.StoreUserPropertySetXML(System.String)">
            <summary>
            Store the user property set into storage - the storage method
            can vary
            </summary>
            <param name="myUPSet"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.SaveUserProperty(System.String,System.String)">
            <summary>
            Store a proptery in the users property bag, this is store in
            the users folder and is not affected by rmoving the system
            </summary>
            <param name="myName">property name</param>
            <param name="myValue">property value</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetUserProperty(System.String)">
            <summary>
            Get a stroed user parameter, this returns a stroed value from
            the users property bag or an empty string if the bag or the
            property is not found
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.FlashMessage(System.String,KaiTrade.Interfaces.FlashMessageType)">
            <summary>
            Flash a warning or error message to the user
            </summary>
            <param name="msg"></param>
            <param name="type"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.SignInExternalUser(System.String,System.String)">
            <summary>
            Sign in an external user of the system (app running over WCF other than ExcelRTD)
            </summary>
            <param name="userID"></param>
            <param name="pwd"></param>
            <returns>System assigned ID - used on requests</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.SignOutExternalUser(System.String)">
            <summary>
            SignOut an external user
            </summary>
            <param name="userID"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Facade.GetUserProfile(System.String)">
            <summary>
            Get the users XML profile from the server
            </summary>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.Facade.Started">
            <summary>
            Get the isStarted property true => the app is correctly started
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Facade.Factory">
            <summary>
            Get the main factory
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Facade.UserIdentifier">
            <summary>
            This is the users identifier for the 
            current session - not their name or pwd
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Facade.AppPath">
            <summary>
            Get/Set the current APP path that the facade is being run
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Facade.ConfigData">
            <summary>
            Get or set the string of config data, this will be XML
            used by the facade to initialize itself - exisitng app
            use XML defined by KTAPPConfig schema
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Facade.PlugIns">
            <summary>
            Get set the list of available plugins
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Facade.IsExternalTradingEnabled">
            <summary>
            Is external trading allowed for the app i.e. for Excel or Other source
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Facade.WindowManager">
            <summary>
            Get set the window manager for the system
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Facade.DefaultVenueName">
            <summary>
            Get/Set the default venue name
            </summary>
            <returns></returns>
        </member>
        <member name="T:KaiTrade.Interfaces.extendedManagerType">
            <summary>
            Defines the types of extended managers we support
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.Factory">
            <summary>
            Defines the interface(what functions) a factory object must provide
            for the Kaitrade system
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetMainMessageHandler">
            <summary>
            get the main message processpr used by the app - this will
            handle all messages sent from the Drivers
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.SetExtendedManager(KaiTrade.Interfaces.extendedManagerType,System.Object)">
            <summary>
            Set an extended manager, this will replace the default KaiTrade manager, for example
            to allow a server based product manager.
            Note that only one extended manager per type is allowed, if you add multiple the
            last one will be used
            </summary>
            <param name="managerType">type of manager</param>
            <param name="newManager">new manager to be used</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetDriverManager">
            <summary>
            Get the Driver manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetMetaDataManager">
            <summary>
            Get the metadata manager - defines grids and ranges
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetVenueManager">
            <summary>
            Get the venue manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetPublisherManager">
            <summary>
            Get the publisher Manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetProductManager">
            <summary>
            Get the Product Manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetOrderManager">
            <summary>
            Get the Order Manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetUserManager">
            <summary>
            Get the User Manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetSessionManager">
            <summary>
            Get the Session Manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetPlugInManager">
            <summary>
            Get the PlugIn Manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetOCOManager">
            <summary>
            Get the OCO Order manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetTriggeredOrderManager">
            <summary>
            Get the Triggered Order Manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetSpreadManager">
            <summary>
            Get the spread/pair trade manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetLimitChecker">
            <summary>
            Get the limit checker used on order submit and modify
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetStrategyManager">
            <summary>
            Get the limit checker used on order submit and modify
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetAccountManager">
            <summary>
            Get the manager used to provide account information
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetAllocationManager">
            <summary>
            Get the manager used to manage allocations
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetUserOptionsManager">
            <summary>
            Get the manager for user's settings and options
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetPositionPublisher">
            <summary>
            Get the position publisher
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetLogger">
            <summary>
            Get the logger used to record system and other messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetTSSetManager">
            <summary>
            Get the Time series data manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetTradeSignalManager">
            <summary>
            get the trade signal manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.CreateOrderGroup">
            <summary>
            create an order group
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Factory.GetAlgoManager">
            <summary>
            Return the algo manager - provides access to a range of algo in KaiTrade
            </summary>
            <returns></returns>
        </member>
        <member name="T:KaiTrade.Interfaces.Field">
            <summary>
            Defines some data field 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Field.Value">
            <summary>
            Current value of the field
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Field.ID">
            <summary>
            Field name/ID
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Field.Changed">
            <summary>
            Has the field been changed
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Field.IsValid">
            <summary>
            Is the field in a valid state
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.Fill">
            <summary>
            Defines a fill receved from a broker or exchange
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Fill.FromXMLDB(KAI.kaitns.OrderFill)">
            <summary>
            Set up order's fill from an XML data binding
            </summary>
            <param name="myOrder"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Fill.ToXMLDB">
            <summary>
            write order's fill onto an XML data bining
            </summary>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.Fill.Identity">
            <summary>
             The fill Identity from the ExecID on a fix message
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Fill.OrderID">
            <summary>
            The order id - this is the KaiTrade order identity
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Fill.FillQty">
            <summary>
            The quantity filled on the exec report - can be 0 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Fill.LastPx">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Fill.AvgPx">
            <summary>
            Average price over all fills for a given order
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Fill.CumQty">
            <summary>
            Cumulative qty - some fills do not have a value
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Fill.LeavesQty">
            <summary>
            Qty left in the market  - some fills do not have a value
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Fill.OrderStatus">
            <summary>
            String version of the order status
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Fill.Ticks">
            <summary>
            Ticks price - specific to a particular broker
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Fill.ExecReport">
            <summary>
            The exec report for the fill
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.FillData">
            <summary>
            Defines a fill receved from a broker or exchange
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.FillData.Identity">
            <summary>
             The fill Identity from the ExecID on a fix message
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.FillData.OrderID">
            <summary>
            The order id - this is the KaiTrade order identity
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.FillData.FillQty">
            <summary>
            The quantity filled on the exec report - can be 0 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.FillData.LastPx">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.FillData.AvgPx">
            <summary>
            Average price over all fills for a given order
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.FillData.CumQty">
            <summary>
            Cumulative qty - some fills do not have a value
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.FillData.LeavesQty">
            <summary>
            Qty left in the market  - some fills do not have a value
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.FillData.OrderStatus">
            <summary>
            String version of the order status
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.FillData.Ticks">
            <summary>
            Ticks price - specific to a particular broker
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.FillData.ExecReport">
            <summary>
            The exec report for the fill
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.FirmType">
            <summary>
            defines the type of firm
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.IFirm">
            <summary>
            Models some financial instritution - for example an FCM or broker
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IFirm.ID">
            <summary>
            Get set the unique identifier
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IFirm.FirmCode">
            <summary>
            Get set the unique identifier
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IFirm.FirmName">
            <summary>
            Get set the unique identifier
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IFirm.FirmType">
            <summary>
            Set the type of firm
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IFirm.External">
            <summary>
            defines if the firm is external - for example firm we give up a trade to
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.IGroup">
            <summary>
            Represents a grouping of aribitary trade objects, products, venues orders etc
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IGroup.ID">
            <summary>
            ID of the group 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IGroup.Name">
            <summary>
            Name of the group
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IGroup.Children">
            <summary>
            List of children
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.INode.ID">
            <summary>
            ID of the object - e.g. a product ID(or Mnemonic)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.INode.Name">
            <summary>
            Name of the Node
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.INode.NodeType">
            <summary>
            Type of node group, product ..  If other then the group is 
            userdefined
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.INode.Children">
            <summary>
            List of children
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.IExchange">
            <summary>
            Define an exchange that we tarde with
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IExchange.ExchangeCode">
            <summary>
            Code for the exchange CME, LSE, NYBOT etc
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IExchange.Name">
            <summary>
            Exchange long name
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.IServer">
            <summary>
            Interface for server components
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IServer.ID">
            <summary>
            Unique ID for the server
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IServer.Name">
            <summary>
            server name
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IServer.InstanceNumber">
            <summary>
            Instance number of server if multiple instances on the host machine
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IServer.MachineName">
            <summary>
            Machine name of pysical server
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IServer.Enabled">
            <summary>
            Server enabled for use
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IServer.ServerRole">
            <summary>
            Get the role of the server, for example algo server, execution server, general purpose and so on
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.K2InstanceFactory">
            <summary>
            Provides a general purpose method to create instances of named objects
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.K2InstanceFactory.CreateInstance(System.String)">
            <summary>
            Create an instance of the names object - this should a name on the list
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.K2InstanceFactory.Names">
            <summary>
            Get List of all named objects supported - these are the names that will be passed back
            to the factory when CreateInstance is called
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.K2RTDSupport.Log(KaiTrade.Interfaces.LogLevel,System.String,System.String)">
            <summary>
            Write a log message
            </summary>
            <param name="level"></param>
            <param name="src"></param>
            <param name="msg"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.PlugInManager.LoadPlugins(System.String,KAI.kaitns.KTAPlugInCol)">
            <summary>
            Load a set of plugins given a data binding colection of plugins
            </summary>
            <param name="plugins"></param>
            <returns>number loaded</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PlugInManager.StartAll(System.String)">
            <summary>
            Start all plugins
            </summary>
            <param name="uid">system allocated user id</param>
        </member>
        <member name="M:KaiTrade.Interfaces.PlugInManager.StopAll(System.String)">
            <summary>
            Stop all pluginns
            </summary>
            <param name="uid"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.PlugInManager.DynamicLoad(System.String,System.String)">
            <summary>
            Dynamically load some plugin (visible or non visible)
            </summary>
            <param name="uid">user id </param>
            <param name="path">path to the plugin</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PlugInManager.CreateUserControl(System.String,System.String,System.String)">
            <summary>
            Create an instance of the specified control
            </summary>
            <param name="uid">user identity</param>
            <param name="pluginName">name of the plugin</param>
            <param name="myName">name of the control</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PlugInManager.GetPlugInNames(System.String)">
            <summary>
            Return a list of the current plugins
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PlugInManager.GetPlugIn(System.String,System.String)">
            <summary>
            Get the plugin using its name
            </summary>
            <param name="uid"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PlugInManager.AddPlugIn(System.String,KaiTrade.Interfaces.KTAPlugin)">
            <summary>
            Add a plugin to the manager
            </summary>
            <param name="plugIn"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.OCOManager.AddOrderOCO(KaiTrade.Interfaces.Order,System.String)">
            <summary>
            Add an order to a group of orders that comprise a set of OCO Orders
            </summary>
            <param name="?"></param>
            <param name="OCOGroupName"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.OCOManager.GetOCOOrders(System.String)">
            <summary>
            Get the list of orders that comprise an OCO scheme by thier oco group name
            </summary>
            <param name="OCOGroupName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.OCOManager.OnOrderTraded(KaiTrade.Interfaces.Order)">
            <summary>
            Called when one of the orders in an OCO group has traded - no action if the order is not traded
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.OCOManager.IsLegged(System.String)">
            <summary>
            This checks that we are not legged, if more than one order
            in the group is filled we consider that the order is legged
            </summary>
            <param name="OCOGroupName"></param>
            <returns></returns>
        </member>
        <member name="T:KaiTrade.Interfaces.PatterMatcherFactory">
            <summary>
            Defiens a factory for getting access to a pattern matching algo
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.PatterMatcherFactory.GetPatternMatcher(System.String)">
            <summary>
            Get an isntance of the names pattern matcher
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PatterMatcherFactory.GetPatternMatcherNames">
            <summary>
            Return a list of patter matchers
            </summary>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.PatterMatcherFactory.AppFacade">
            <summary>
            Get set the app facade that objects created by this factory can use
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.MatchCompleted">
            <summary>
            Delegate to indicate matching has occured
            </summary>
            <param name="myMatcher"></param>
        </member>
        <member name="T:KaiTrade.Interfaces.PatternMatcher">
            <summary>
            Defines the interface that pattern matching objects used with a TS Set
            will use
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.PatternMatcher.AddStrategyName(System.String)">
            <summary>
            Add a strategy name to the list the matcher supports publishes to
            </summary>
            <param name="myName"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.PatternMatcher.DetectMatches(System.Boolean)">
            <summary>
            Detect matches in the set associated with the matcher - this will
            typically set/publish conditions
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.PatternMatcher.GetAtdl">
            <summary>
            Get the Atdl that corresponds to this algo - older algos may not support this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PatternMatcher.Reset">
            <summary>
            Set the patern matcher back to its initial state
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.PatternMatcher.ApplyPriceUpdate(KaiTrade.Interfaces.PXUpdate)">
            <summary>
            Apply a simple price update - note bar data sets are handled as TS Sets
            </summary>
            <param name="pxUpdate"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.PatternMatcher.GetParameterValue(System.String)">
            <summary>
            Get a setting value by name - used to get matcher parameters
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PatternMatcher.SetParameterValue(System.String,System.String)">
            <summary>
            Set a alg setting by name, used to set parameters used by the matcher
            </summary>
            <param name="myValue"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.PatternMatcher.GetParameterNames">
            <summary>
            Get a list of avalaible parameters for the matcher
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PatternMatcher.ToXMLDB">
            <summary>
            Return the XML rendering of the Matcher
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PatternMatcher.FromXMLDB(KAI.kaitns.PatternMatcher)">
            <summary>
            Render the matcher in XML
            </summary>
            <param name="myMatcher"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.PatternMatcher.Alias">
            <summary>
            Alias for the patternmatcher - used to publish results
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PatternMatcher.PublishName">
            <summary>
            Publish name for conditions and events ids
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PatternMatcher.MatchCompleted">
            <summary>
            Called on Set updates
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PatternMatcher.TSSet">
            <summary>
            Get/Set the TSSet the matcher will work on
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PatternMatcher.Name">
            <summary>
            matcher name
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PatternMatcher.ParameterString">
            <summary>
            WILL BE DEPRICATED delimited set/express for parameters
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PatternMatcher.Parameters">
            <summary>
            Paramters requred for the expression
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PatternMatcher.Children">
            <summary>
            Child pattern matchers - these can be called as a
            hieracrchy 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PatternMatcher.Output">
            <summary>
            Array of outputs - specific to the matcher
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PatternMatcher.OutputNames">
            <summary>
            Array of outputs names- specific to the matcher
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PatternMatcher.TriggerNames">
            <summary>
            Get a list of the trigger names the pattern matcher publishes - if any
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Interfaces.PNLItem" -->
        <member name="P:Interfaces.PNLItem.Mnemonic">
            <summary>
            Get/Set the product mnemonic for this portfolio item
            </summary>
        </member>
        <member name="P:Interfaces.PNLItem.AccountID">
            <summary>
            Account Identifier for this line of 
            </summary>
        </member>
        <member name="P:Interfaces.PNLItem.Position">
            <summary>
            Position of this product line as a decimal, +ve values are long
            and -ve values are short
            </summary>
        </member>
        <member name="P:Interfaces.PNLItem.MktPrice">
            <summary>
            market price of a unit of the product
            </summary>
        </member>
        <member name="P:Interfaces.PNLItem.AvgPrice">
            <summary>
            Avergage price per unit of postion - based on the fills
            </summary>
        </member>
        <member name="P:Interfaces.PNLItem.RealizedPNL">
            <summary>
            realiazed PNL - based on the difference of the average price and the current market price
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Interfaces.PNLItem.UnRealizedPNL" -->
        <member name="T:KaiTrade.Interfaces.PriceAgregator">
            <summary>
            Defines an interface that an object handling raw prices to agregate them into time
            or volume slices must implement
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.PriceAgregator.ProcessPrice(System.Decimal,System.Decimal,System.DateTime,System.Object)">
            <summary>
            Process a product price into a set of slices in a TSSet
            </summary>
            <param name="myPx">decimal price</param>
            <param name="myVolume">volume at the price - used for constant vol bars</param>
            <param name="myTimeStamp">time stamp that the price was reported at the firm</param>
        </member>
        <member name="M:KaiTrade.Interfaces.PriceAgregator.ProcessPrice(System.Decimal)">
            <summary>
            Process a product price into a set of time slices based on the local time price is processed
            </summary>
            <param name="myPx">decimal price</param>
        </member>
        <member name="M:KaiTrade.Interfaces.PriceAgregator.ProcessPrice(KaiTrade.Interfaces.PXUpdate)">
            <summary>
            Process a product price into a set of time slices based on the price update passed
            </summary>
            <param name="myPx">decimal price</param>
        </member>
        <member name="P:KaiTrade.Interfaces.PriceAgregator.TSSet">
            <summary>
            Get/Set the TSSet the agregator will work on
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.PublisherSurrogate">
            <summary>
            This represents a place holder for a regular publisher
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.PXSourceState">
            <summary>
            used to show the atate of the source of pxupdates
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.PXDepthOperation">
            <summary>
            Determines the type of depth operation on an update
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.PXUpdateType">
            <summary>
            Type of update
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.PXUpdate">
            <summary>
            This interface represents a price update - note that this is often applied to the L1PX interface
            and that its possible to get updates containing the same values for some of the fields
            where some price source soes not explicitly produce just the changed price fields
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.PXUpdate.From(KaiTrade.Interfaces.PXUpdate)">
            <summary>
            Sets the current update using an existing update
            </summary>
            <param name="update"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.PXUpdate.Originator">
            <summary>
            Provided of the update - normally the driver ID
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PXUpdate.Sequence">
            <summary>
            Sequence number of the update - this is unique within a particular susbcription
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PXUpdate.Ticks">
            <summary>
            Time in ticks - local time update received
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PXUpdate.UpdateType">
            <summary>
            Defines the type of price update
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PXUpdate.ServerTicks">
            <summary>
            Time in ticks of the update from the server - this is not always available
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PXUpdate.Mnemonic">
            <summary>
            Product mnemonic
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PXUpdate.DepthMarket">
            <summary>
            Market (MarketMaker) offering a depth entry
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PXUpdate.DepthPosition">
            <summary>
            position of the depth  0 ... +N, not that the use of bid or offer price
            implies the side
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PXUpdate.DepthOperation">
            <summary>
            Get set the depth operation - i.e insert, replace delete
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PXUpdate.DriverTag">
            <summary>
            Tag/data that can be added by a driver
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PXUpdate.OfferPriceDelta">
            <summary>
            Current delta 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PXUpdate.OfferSizeDelta">
            <summary>
            Curreent delta
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.StatExpression">
            <summary>
            Defines the interface that a class performing statistical/numerical 
            analysis on the set of TS data will provide
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.StatExpression.EvaluateAdded(System.Boolean)">
            <summary>
            Evaluate the expression on the current data, normally should use
            the last complete item/bar - setting bUseCurrent bar will cause
            the evaluation to include the bar being added to, that has yet to
            end.
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.StatExpression.GetAtdl">
            <summary>
            Get the Atdl that corresponds to this algo - older algos may not support this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.StatExpression.ToXMLDB">
            <summary>
            Return the XML rendering of the expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.StatExpression.FromXMLDB(KAI.kaitns.StatExpression)">
            <summary>
            Render the expression in XML
            </summary>
            <param name="myMatcher"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.StatExpression.TSSet">
            <summary>
            Get/Set the TSSet the statistic function will work on
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StatExpression.Value">
            <summary>
            Get Current Value
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StatExpression.Name">
            <summary>
            Expression name
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StatExpression.Parameters">
            <summary>
            Paramters requred for the expression
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StatExpression.Expression">
            <summary>
            WILL BE DEPRICATED - pared for paramters
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.StatExpressionFactory">
            <summary>
            Interface that some factory that provides statistical caluclations (Averegaes, ATR etc)
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.StatExpressionFactory.GetStatExpression(System.String)">
            <summary>
            Get an isntance of the nameed expression
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.StatExpressionFactory.GetStatExpressionNames">
            <summary>
            Return a list of expression
            </summary>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.StatExpressionFactory.AppFacade">
            <summary>
            Get set the app facade that objects created by this factory can use
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.ATDLType">
            <summary>
            Defines the type of paramter - based on FIX ATDL
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.ParmeterMode">
            <summary>
            Define how the parameter is used
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.K2Parameter">
            <summary>
            This defines a parameter for a strategy or othe algo - it extends existing strategy parameters used
            in orders and strategy and allows interoperation using FIX Protocol ADTL
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.K2Parameter.ParameterName">
            <summary>
            Name of the parmeter
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.K2Parameter.ParameterType">
            <summary>
            Type of parameter
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.K2Parameter.ParameterValue">
            <summary>
            Value of the Paramter as a string
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.K2Parameter.Optional">
            <summary>
            Determines if the paramter is optional
            true => optional, false => the parameter is required
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.K2Parameter.FIXTag">
            <summary>
            FIXTag if appropriate, else 0
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TradeSignalType">
            <summary>
            Defines the query types available
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TradeSignal">
            <summary>
            Defines a trade signal from an external system
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSignal.SignalType">
            <summary>
            Type of signal
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSignal.Identity">
            <summary>
            unique identifier
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSignal.Origin">
            <summary>
            Origin of signal - for example a CQG system trade in a trading system
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSignal.Name">
            <summary>
            Name of signal
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSignal.Set">
            <summary>
            Is the signal set
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSignal.Mnemonic">
            <summary>
            Product to be used with this signal - if this is empty then the
            product must be already specified in the strategy/algo processing 
            the signal
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSignal.OrdType">
            <summary>
            Type of order associated with this signal
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSignal.Side">
            <summary>
            Side of order associated with this signal
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSignal.OrdQty">
            <summary>
            Order quantity associated with the signal
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSignal.Price">
            <summary>
            price associated with the signal
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSignal.StopPrice">
            <summary>
            stop price associated with the signal
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSignal.ProfitPrice">
            <summary>
            profit price associated with the signal
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TradeSignalManager">
            <summary>
            Interface of an object the allocates trade signals
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TradeSummary">
            <summary>
            Defines an object that summarizes the trades for a given order at some
            point in time
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TradeSummary.FromOrder(KaiTrade.Interfaces.Order)">
            <summary>
            setup the trade summary from an Order
            </summary>
            <param name="?"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSummary.OrderIdentity">
            <summary>
            KaiTrade order Identity
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSummary.AvgPx">
            <summary>
            Average price over all fills for a given order
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSummary.Position">
            <summary>
            position +Ve is long -ve is short
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.IExternal">
            <summary>
            External interface used by clients such as web pages to 
            use KaiTrade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.IExternal.Send(KaiTrade.Interfaces.Message)">
            <summary>
            Send a message - the driver needs to process this message
            the Message usually wraps a FIX message for trading
            </summary>
            <param name="myMsg"></param>
        </member>
        <member name="T:KaiTrade.Interfaces.KTAPlugin">
            <summary>
            Defines the interface plugins must impliment to work with KTA - a plugin is a class
            lib that can be dynamically loaded by KaiTrade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.KTAPlugin.CreateUserControl(System.String)">
            <summary>
            Create a  control from the controls supported by the plugin - note that a plugin
            does not need to have some control, a plugin can run without a UI
            </summary>
            <param name="myName">name of control to create</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.KTAPlugin.CreateK2Control(System.String)">
            <summary>
            Create an instance of a new K2 style control
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.KTAPlugin.GetControlImage(System.String)">
            <summary>
            Get the image associated with the control - this can return null
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.KTAPlugin.GetUserControlName">
            <summary>
            Get a list of control names in the plugin - this can return and empty list
            an empty list will mean that no user interface will be shown
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.KTAPlugin.SetFacade(KaiTrade.Interfaces.Facade)">
            <summary>
            Set the APP Facade in the plugin - this lets the plugin do things with KTA
            </summary>
            <param name="myFacade"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.KTAPlugin.SetK2ServiceClient(System.Object)">
            <summary>
            Set an instance of the K2ServiceClient available
            </summary>
            <param name="svcClient"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.KTAPlugin.SetUserContext(KaiTrade.Interfaces.User)">
            <summary>
            Set the plugin user 
            </summary>
            <param name="myUserContext"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.KTAPlugin.Start(System.String)">
            <summary>
            Start the plugin - you should throw an exception if this fails, the
            exception will then be logged.
            </summary>
            <param name="myState"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.KTAPlugin.Stop">
            <summary>
            Stop the plugin- you should throw an exception if this fails, the
            exception will then be logged.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.KTAPlugin.Name">
            <summary>
            Name of plugin
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.KTAPlugin.GroupName">
            <summary>
            Get the group name that the control belongs to
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.KTAPlugin.ID">
            <summary>
            get the controls ID - used to permission
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.GenericType">
            <summary>
            The type of control, note that a product type control can
            be displayed on the product viewer
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.K2Control">
            <summary>
            Represents some  control or library - this is used to extend the way objects
            from a visible or non visiable plug can be used
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.K2Control.Mnemonic">
            <summary>
            The mnemonic if any that the control will use
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.K2Control.State">
            <summary>
            Control defined state - can be xml
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.K2Control.GenericType">
            <summary>
            read or write the generic type of control
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.K2Control.Control">
            <summary>
            Control or lib
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.L1PX">
            <summary>
            Level one price interface - this always shows an image of prices
            for some products. It may be updated using PXUpdate
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.L1PX.ApplyUpdate(KaiTrade.Interfaces.PXUpdate)">
            <summary>
            Apply the update to the corresponding prices
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.L1PX.AsUpdate">
            <summary>
            Get the price values as an updates
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.L1PX.AsCSVString(System.String)">
            <summary>
            Return a delimited string of current values 
            time stamp, mnemonic bidsz, bidpx,offerpx, offersz, tradesz, trade px
            </summary>
            <param name="myDelimiter">delimiter used between pxvalues</param>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.L1PX.TradePrice">
            <summary>
            The last trade price for some product
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.L1PX.TradeVolume">
            <summary>
            The last trade volume for some product
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.L1PX.TradePriceDelta">
            <summary>
            Change in trade price
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.L1PX.APIUpdateTime">
            <summary>
            API Time of last update(from driver)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.L1PX.QuoteID">
            <summary>
            QuoteID of a update by a quote - this is only valid in response to 
            a quote request
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.L1PX.ValidityPeriod">
            <summary>
            Get/set the length of time in milli seconds that this quote (or update) is valid for
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.LegPxUpdate">
            <summary>
            Defines the Leg price update delegate
            </summary>
            <param name="myPX"></param>
        </member>
        <member name="T:KaiTrade.Interfaces.Leg">
            <summary>
            Defines a leg of some tradeable product, note that a leg only occurs in one product
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Leg.SubscribePX">
            <summary>
            Start to subscribe to prices for the leg product
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Leg.FromXMLDB(KAI.kaitns.Leg,System.Boolean)">
            <summary>
            Set up a leg from an XML data binding
            </summary>
            <param name="myLeg"></param>
            <param name="myLoadProduct">If true load and underlying legs specified</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Leg.ToXMLDB">
            <summary>
            write a leg onto an XML data bining
            </summary>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.PxUpdate">
            <summary>
            get/set handles for a legpx update
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.Identity">
            <summary>
            get the identity for the leg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.Mnemonic">
            <summary>
            Get/Set the leg Mnemonic
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.Product">
            <summary>
            Get the product associated with this leg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.PositionIndex">
            <summary>
            get/set the position index of this leg in the products list of legs
            used to optimise performance
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.Parent">
            <summary>
            Get/Set the parent product associated with this leg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.AccountCode">
            <summary>
            get/set the account used for this leg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.Type">
            <summary>
            Type of spread
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.Side">
            <summary>
            Side of the leg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.ShortSaleLocate">
            <summary>
            If the side is Short Sell this needs to be used
            to specify where the products are held
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.OrdType">
            <summary>
            Order type of the leg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.Quoted">
            <summary>
            Is this leg quoted in the market
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.Price">
            <summary>
            Price for the leg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.PriceTickOffset">
            <summary>
            Offset to applied to price - used for spreads
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.SpreadOffset">
            <summary>
            Spread Offset to applied to price as an absolute value- used for spreads
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.TickSize">
            <summary>
            Leg Tick size - this should come from the product - but we *must* have one here
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.NumberDecimalPlaces">
            <summary>
            return the number of decimal places
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.PriceDampeningFactor">
            <summary>
            Factor to dampen our reaction to price changes 0 => no dampening
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.Quantity">
            <summary>
            Quantity for the leg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.Multiplier">
            <summary>
            Leg multiplier -used to match say Barrel versus Gallons
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.Ratio">
            <summary>
            Ratio for the leg to the sum of Legs in a product
            calculated based on Qtys
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Leg.L1PX">
            <summary>
            get a L1PX interface for the leg
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.LimitChecker">
            <summary>
            defines the interface that must be implimented by an object used to 
            check limits when trading.
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.LimitChecker.BreaksLimits(System.String@,KaiTrade.Interfaces.Order)">
            <summary>
            Does this order break limits
            </summary>
            <param name="?"></param>
            <returns>true => limits broken/exceeded</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.LimitChecker.BreaksLimits(System.String@,KaiTrade.Interfaces.Order,System.Double,System.Double)">
            <summary>
            If the order price and qty are changed are the limits broken
            </summary>
            <param name="myOrder">exisitng order</param>
            <param name="newQty">new qty</param>
            <param name="newPrice">new price</param>
            <returns>true => limits broken/exceeded</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.LimitChecker.SetPosition(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the current position
            </summary>
            <param name="myLongWrk"></param>
            <param name="myShortWrk"></param>
            <param name="myLongFilled"></param>
            <param name="myShortFilled"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.LimitChecker.MaxOrderQty">
            <summary>
            Get/Set max qty for an individual order
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.LimitChecker.SystemMaxQtyLimit">
            <summary>
            Max qty allowed for all orders in the system
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.LimitChecker.MaxOrderConsideration">
            <summary>
            Get/set max consideration (price*vol) for an individual order
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.LimitChecker.SystemMaxConsideration">
            <summary>
            Get/set the max consideration for the system
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.Logger">
            <summary>
            Defines the interface for some generic logger used for system messages
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Logger.LogMessage(KaiTrade.Interfaces.Message)">
            <summary>
            Log a message, will update subscribers of the logger
            </summary>
            <param name="myMsg"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.Logger.Messages">
            <summary>
            Get the current set of logged messages
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.MessageHelper">
            <summary>
            Defines the interface that an object used to provide status message processing 
            must impliment
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.MessageHelper.SendAdvisoryMessage(System.String)">
            <summary>
            Send a simple advisory message to all clients of the 
            adapter
            </summary>
            <param name="myMessageText"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.MessageHelper.SendMessage(KaiTrade.Interfaces.Message)">
            <summary>
            Send some message back to our clients
            </summary>
            <param name="myMessage"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.MessageHelper.sendResponse(System.String,System.String)">
            <summary>
            Send a FIX style response to our clients
            </summary>
            <param name="msgType"></param>
            <param name="myResponseMsg"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.MessageHelper.SendLastStatusMessage">
            <summary>
            Resend the last status message
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.MessageHelper.SendStatusMessage(KaiTrade.Interfaces.Message)">
            <summary>
            Send a status message to all of our clients
            </summary>
            <param name="myMessage"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.MessageHelper.SendStatusMessage(KaiTrade.Interfaces.Status,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send a FIX style status message specifing all parameters
            </summary>
            <param name="myState"></param>
            <param name="myText"></param>
            <param name="myBegin"></param>
            <param name="mySID"></param>
            <param name="myTID"></param>
            <param name="myFixName"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.MessageHelper.SendStatusMessage(KaiTrade.Interfaces.Status,System.String)">
            <summary>
            send a stuts message
            </summary>
            <param name="myState"></param>
            <param name="myText"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.MessageHelper.Driver">
            <summary>
            Get/Set the driver that we are helping - needed for access to the client list
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.MetaDataManager">
            <summary>
            Defines the interface a metadata manager needs to provide
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.MetaDataManager.LoadMetaData(System.String)">
            <summary>
            Load the metadata from a set of XML contained in a file
            </summary>
            <param name="myPath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.MetaDataManager.ProcessMetaData(KAI.kaitns.KTAMetaData)">
            <summary>
            Process a meta data databinding object - this sets up indexes to the
            tables(grids) defined in the meta data
            </summary>
            <param name="myMD">new data binding</param>
        </member>
        <member name="M:KaiTrade.Interfaces.MetaDataManager.GetGrid(System.String)">
            <summary>
            Get a grid using its name
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.MetaDataManager.MetaDataDB">
            <summary>
            Get the metadata databinding object
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.ORAlgManager">
            <summary>
            The interface that an object that manages a set of Order routing
            algorithms must implement
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.ORAlgManager.GetORAlgAlgorithm(System.String)">
            <summary>
            Get a named OR Strategy Algorithm
            </summary>
            <param name="myName">name of strategy</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ORAlgManager.AddORAlgAlgorithm(System.String,KaiTrade.Interfaces.ORStrategyAlgorithm)">
            <summary>
            Add an OR Strategy Algorithm
            </summary>
            <param name="myName"></param>
            <param name="myAlg"></param>
        </member>
        <member name="T:KaiTrade.Interfaces.ORAlgCompleted">
            <summary>
            Delegate to indicate the algo has completed 
            </summary>
            <param name="myMatcher"></param>
        </member>
        <member name="T:KaiTrade.Interfaces.ORStrategyAlgorithm">
            <summary>
            This interface defines the methods that an algorithm used with a strategy
            must impliment. A strategy will use different algorithms depending on the
            type of strategy
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.Reset">
            <summary>
            Reset the alg to its starting state
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.Run(KaiTrade.Interfaces.Strategy)">
            <summary>
            Start the algo running this may result in orders being placed
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.Enter(KaiTrade.Interfaces.Strategy)">
            <summary>
            Enter the strategy - action depends on implimenting class
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.Exit(KaiTrade.Interfaces.Strategy)">
            <summary>
            Exit the strategy - action depends on implimenting class
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.HandleTradeSignal(KaiTrade.Interfaces.Strategy,System.Boolean,KaiTrade.Interfaces.TradeSignal)">
            <summary>
            Process a Trade signal
            </summary>
            <param name="myStrategy">strategy running the algo</param>
            <param name="isExitSignal">is the signal an exit-depends on the list of exists for the strategy</param>
            <param name="mySignal">a trade signal</param>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.Submit(KaiTrade.Interfaces.Strategy)">
            <summary>
            Submit the strategy based on the default parameters in the strategy
            </summary>
            <param name="myStrategy"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.Submit(KaiTrade.Interfaces.Strategy,KaiTrade.Interfaces.Order)">
            <summary>
            Sumbit the order - note that the order passed is only used to hold order parameters
            </summary>
            <param name="myStrategy"></param>
            <param name="myOrder"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.Submit(KaiTrade.Interfaces.Strategy,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{KaiTrade.Interfaces.K2Parameter})">
            <summary>
            Place order for the strategy
            </summary>
            <param name="myStrategy"></param>
            <param name="myQty"></param>
            <param name="myQtyLimit"></param>
            <param name="myPrice"></param>
            <param name="myStopPx"></param>
            <param name="mySide"></param>
            <param name="myOrderType"></param>
            <param name="myTimeType"></param>
            <param name="myDateTime"></param>
            <param name="myAccount"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.Replace(KaiTrade.Interfaces.Strategy,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Apply a modification to a strategy
            </summary>
            <param name="myStrategy"></param>
            <param name="newQty"></param>
            <param name="newPrice"></param>
            <returns>number of affected orders</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.Cancel(KaiTrade.Interfaces.Strategy)">
            <summary>
            Cancel a running strategy
            </summary>
            <param name="myStrategy"></param>
            /// <returns>number of affected orders</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.Flatten(KaiTrade.Interfaces.Strategy)">
            <summary>
            Flatten/Trade out any positions in the strategy
            </summary>
            <param name="myStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.HandleExecReport(QuickFix.Message,KaiTrade.Interfaces.Strategy,KaiTrade.Interfaces.Order)">
            <summary>
            Handle an Exec report for an order belonging to a strategy
            the primitive gandling of the exec report on the order itself will have been done
            exec reports always relate to an actual order in the market
            </summary>
            <param name="myExec">fix execution report</param>
            <param name="myOrd">order the execution report applies to </param>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.HandleReject(QuickFix.Message,KaiTrade.Interfaces.Strategy,KaiTrade.Interfaces.Order)">
            <summary>
            Handle an reject report for an order belonging to a strategy
            the primitive gandling of the exec report on the order itself will have been done
            reject reports always relate to an actual order in the market
            </summary>
            <param name="myExec">fix execution report</param>
            <param name="myOrd">order the execution report applies to </param>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.HandlePositionChange(KaiTrade.Interfaces.Strategy)">
            <summary>
            Apply a change in position
            </summary>
            <param name="myStrategy"></param>
            <param name="myExec"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.RefreshPosition(KaiTrade.Interfaces.Strategy)">
            <summary>
            Refresh the position of the Strategy, will iterate the orders to 
            total position
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.GetPNL(KaiTrade.Interfaces.Strategy)">
            <summary>
            get the PnL for the strategy - calculated when accessed 
            not you need prices for this.
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.GetParameterValue(System.String)">
            <summary>
            Get a setting value by name - used to get alg parameters
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.SetParameterValue(System.String,System.String,System.String)">
            <summary>
            Set a alg setting by name, used to set parameters used by the alg. The names
            need to match those published in ATDL
            </summary>
            <param name="myName"></param>
            <param name="myValue"></param>
            <param name="runIdentifier">this identifies a particular run - if empty will just apply in general</param>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.SetParameterValue(KaiTrade.Interfaces.K2Parameter,System.String)">
            <summary>
            Set a paramter in the alg
            </summary>
            <param name="parameter"></param>
            <param name="runIdentifier"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.GetParameterNames">
            <summary>
            Get a list of avalaible parameters for the alg
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.ClearParameters">
            <summary>
            Clear the algo parameters
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.GetAtdl">
            <summary>
            Get the Atdl that corresponds to this algo - older algos may not support this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ORStrategyAlgorithm.ProcessOrderGroup(KaiTrade.Interfaces.OrderGroup)">
            <summary>
            Process a set of orders - typically on a timed basis
            </summary>
            <param name="?"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.ORStrategyAlgorithm.ORAlgCompleted">
            <summary>
            Called on Set updates - used to allow clients to be evented when the alg completes
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ORStrategyAlgorithm.Name">
            <summary>
            Get the name of this alg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ORStrategyAlgorithm.Strategy">
            <summary>
            Get/Set the strategy runing this algo
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ORStrategyAlgorithm.StartPosition">
            <summary>
            Starting position - used to offset the actual position 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ORStrategyAlgorithm.Compeleted">
            <summary>
            number of complete runs - e.g. a fully sequence buy-sell etc is done
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ORStrategyAlgorithm.RunCount">
            <summary>
            how many time we have run
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ORStrategyAlgorithm.CorrelationID">
            <summary>
            Identifier used to track a trade system use of orders, strategeies and algos against some
            ID
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.Order">
            <summary>
            Defines the behaviour of orders used in KaiTrade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Order.FromXMLDB(KAI.kaitns.Order)">
            <summary>
            Set up order from an XML data binding
            </summary>
            <param name="myOrder"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Order.ToXMLDB">
            <summary>
            write order onto an XML data bining
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Order.ToTabSeparated">
            <summary>
            Return an order as tab separated
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Order.IsWorking">
            <summary>
            Returns if the order is working i.e. it can be canceled or modified
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Order.GetCurrentPNL">
            <summary>
            Get the PnL for the order provided at this time(current market prices) if the orders
            product is subscribed - will throw an exception if the product is not valid.
            Note this is not realtime, its calculated when called
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Order.GetCurrentPNL(System.Double)">
            <summary>
            Get the PnL for the order provided at this time(current market prices) using the 
            fill prices passed in.- will throw an exception if the product is not valid.
            This is used to calc the PNL implications of trading working qty at market price
            Note this is not realtime, its calculated when called
            </summary>
            <param name="AvgPx">Assumed fill prices</param>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.Identity">
            <summary>
            Gets the identity of the order.
            </summary>
            <value>The identity.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.Product">
            <summary>
            Get/Set the orders product
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.UserID">
            <summary>
            Get/Set user(systemID) that the order belongs to 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.ParentIdentity">
            <summary>
            Get/Set the orders parent, will be the identity of some strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.TriggerOrderID">
            <summary>
            ID of order trigger - see triggeredOrders
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.OrderGroup">
            <summary>
            Get/Set the group(if any) that the order belongs to, this is used when orders are
            related for example in pairs trading - note that a Strategy can contain
            one of more OrderGroups
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.OCAGroupName">
            <summary>
            Get/Set the name of the group of OCO orders that this order
            belongs to.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.OCAOrderLinkName">
            <summary>
            Used to link a set of orders that are executed under an OCO group, this is used to allow one of the
            initial orders in the group to spawn other orders, provided these have the same LinkName they will 
            be treated like the inital order, an example of use would be a Profit Taking order, that places the total 
            qty desired in N tranches, each of the orders it submits can be treated like the original order
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.Tag">
            <summary>
            Gets or sets user defined tag
            </summary>
            <value>The tag text.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.Expiration">
            <summary>
            Time in ticks that the order expires - used in some
            algos to expire groups that for example have not completed in a given period
            of time
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.IsAutoTrade">
            <summary>
            Specifies if the order is an AutoTradeOrder
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.AutoTradeProcessCount">
            <summary>
            Get/Set the autotradecount
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.Side">
            <summary>
            Gets or sets the side.
            </summary>
            <value>The side.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.ShortSaleLocate">
            <summary>
            If the side is Short Sell this needs to be used
            to specify where the products are held
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.LocateReqd">
            <summary>
            Required for short sell orders
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.LocationID">
            <summary>
            Identification of a Market Maker’s location
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.OrdType">
            <summary>
            Gets or sets the type of the order.
            </summary>
            <value>The type of the order.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.ExtendedOrdType">
            <summary>
            get set the extended order type (KTRLSTOP etc..)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.ExtendedOrdTypeParameters">
            <summary>
            Get/Set any parameters asscociated with the extended order type
            the order and usage of the parameters depends on the type
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.OrderID">
            <summary>
            Gets or sets the exchange order id.
            </summary>
            <value>The exchange order id.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.ClOrdID">
            <summary>
            Gets or sets the client order id.
            </summary>
            <value>The client order id.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.OrigClOrdID">
            <summary>
            Gets or sets the original client order id.
            </summary>
            <value>The original client order id.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.NOSBag">
            <summary>
            Get/Set the NOS extra field bag - these are added to any outbound NOS fix message
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.CancelBag">
            <summary>
            Get/Set the Cancel extra field bag - these are added to any outbound NOS fix message
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.ReplaceBag">
            <summary>
            Get/Set the Cancel extra field bag - these are added to any outbound NOS fix message
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.TradeVenue">
            <summary>
            Gets or sets the trade venue.
            </summary>
            <value>The venue.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.HighLimit">
            <summary>
            High limit for the autotrade object
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.LowLimit">
            <summary>
            Low limit for the autotrade object
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.QuantityLimit">
            <summary>
            Quantity limit for the autotrade object
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.QuantityDelta">
            <summary>
            Quantity Delta for the autotrade object
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.PriceDelta">
            <summary>
            Price Delta for the autotrade object
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.FillsList">
            <summary>
            Gets the fills list.
            </summary>
            <value>The fills list.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.CumQty">
            <summary>
            Get/set the currently executed quantity for chain of orders.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.LastQty">
            <summary>
            The amount filled in the last execution
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.LastPx">
            <summary>
            Get/Set the LastPX from the last fill/execution report
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.AvgPx">
            <summary>
            Get/Set the AvgPx for the fills so far
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.Consideration">
            <summary>
            Consideration AvgPx*amount filled
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.LeavesQty">
            <summary>
            the quantity open for further execution (order qty - cum qty)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.Account">
            <summary>
            Gets or sets the account code
            </summary>
            <value>The account number.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.HandlInst">
            <summary>
            get/set the hanlding instructions
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.Mnemonic">
            <summary>
            Gets or sets the Mnemonic.
            </summary>
            <value>The monika.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.TimeInForce">
            <summary>
            Gets or sets the time in force.
            </summary>
            <value>The time in force.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.ExpireDate">
            <summary>
            Required for GTD orders
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.Price">
            <summary>
            Gets or sets the price.
            </summary>
            <value>The price.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.StopPx">
            <summary>
            Gets or sets the stop price.
            </summary>
            <value>The price.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.OrderQty">
            <summary>
            Gets or sets the quantity.
            </summary>
            <value>The quantity.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.MaxFloor">
            <summary>
            Gets or sets Maximum quantity (e.g. number of shares) within an order to be shown 
            on the exchange floor at any given time.
            </summary>
            <value>The quantity target.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.TransactTime">
            <summary>
            Gets or sets the order transact time.
            </summary>
            <value>The order time.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.K2Parameters">
            <summary>
            Get/Set the list of strategy parameters for the order - based on FIX Protocal ADTL
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.StrategyName">
            <summary>
            Gets or sets the name of the strategy.
            </summary>
            <value>The name of the strategy.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.CorrelationID">
            <summary>
            Identifier used to track a trade system use of orders, strategeies and algos against some
            ID
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.OrdStatus">
            <summary>
            Gets or sets the state of the order.
            </summary>
            <value>The state of the order.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.LastCommand">
            <summary>
            Is the order pending a replace request
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Order.Text">
            <summary>
            Get/Set freeform text associated with the order
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.Identity">
            <summary>
            Gets the identity of the order.
            </summary>
            <value>The identity.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.ParentIdentity">
            <summary>
            Get/Set the orders parent, will be the identity of some strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.UserID">
            <summary>
            Get/Set user(systemID) that the order belongs to 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.TriggerOrderID">
            <summary>
            ID of order trigger - see triggeredOrders
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.OCAGroupName">
            <summary>
            Get/Set the name of the group of OCO orders that this order
            belongs to.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.Tag">
            <summary>
            Gets or sets user defined tag
            </summary>
            <value>The tag text.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.CorrelationID">
            <summary>
            Identifier used to track a trade system use of orders, strategeies and algos against some
            ID
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.Expiration">
            <summary>
            Time in ticks that the order expires - used in some
            algos to expire groups that for example have not completed in a given period
            of time
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.IsAutoTrade">
            <summary>
            Specifies if the order is an AutoTradeOrder
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.AutoTradeProcessCount">
            <summary>
            Get/Set the autotradecount
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.Side">
            <summary>
            Gets or sets the side.
            </summary>
            <value>The side.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.ShortSaleLocate">
            <summary>
            If the side is Short Sell this needs to be used
            to specify where the products are held
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.LocateReqd">
            <summary>
            Required for short sell orders
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.LocationID">
            <summary>
            Identification of a Market Maker’s location
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.OrdType">
            <summary>
            Gets or sets the type of the order.
            </summary>
            <value>The type of the order.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.ExtendedOrdType">
            <summary>
            get set the extended order type (KTRLSTOP etc..)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.ExtendedOrdTypeParameters">
            <summary>
            Get/Set any parameters asscociated with the extended order type
            the order and usage of the parameters depends on the type
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.OrderID">
            <summary>
            Gets or sets the exchange order id.
            </summary>
            <value>The exchange order id.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.ClOrdID">
            <summary>
            Gets or sets the client order id.
            </summary>
            <value>The client order id.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.OrigClOrdID">
            <summary>
            Gets or sets the original client order id.
            </summary>
            <value>The original client order id.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.TradeVenue">
            <summary>
            Gets or sets the trade venue.
            </summary>
            <value>The venue.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.QuantityLimit">
            <summary>
            Quantity limit for the autotrade object
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.CumQty">
            <summary>
            Get/set the currently executed quantity for chain of orders.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.LastQty">
            <summary>
            The amount filled in the last execution
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.LastPx">
            <summary>
            Get/Set the LastPX from the last fill/execution report
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.AvgPx">
            <summary>
            Get/Set the AvgPx for the fills so far
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.LeavesQty">
            <summary>
            the quantity open for further execution (order qty - cum qty)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.Account">
            <summary>
            Gets or sets the account code
            </summary>
            <value>The account number.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.HandlInst">
            <summary>
            get/set the hanlding instructions
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.Mnemonic">
            <summary>
            Gets or sets the Mnemonic.
            </summary>
            <value>The monika.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.TimeInForce">
            <summary>
            Gets or sets the time in force.
            </summary>
            <value>The time in force.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.ExpireDate">
            <summary>
            Required for GTD orders
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.Price">
            <summary>
            Gets or sets the price.
            </summary>
            <value>The price.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.StopPx">
            <summary>
            Gets or sets the stop price.
            </summary>
            <value>The price.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.OrderQty">
            <summary>
            Gets or sets the quantity.
            </summary>
            <value>The quantity.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.MaxFloor">
            <summary>
            Gets or sets Maximum quantity (e.g. number of shares) within an order to be shown 
            on the exchange floor at any given time.
            </summary>
            <value>The quantity target.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.TransactTime">
            <summary>
            Gets or sets the order transact time.
            </summary>
            <value>The order time.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.StrategyName">
            <summary>
            Gets or sets the name of the strategy.
            </summary>
            <value>The name of the strategy.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.AlgoName">
            <summary>
            Gets or sets the algo of the strategy.
            </summary>
            <value>The name of the strategy.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.OrdStatus">
            <summary>
            Gets or sets the state of the order.
            </summary>
            <value>The state of the order.</value>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.Text">
            <summary>
            Get/Set freeform text associated with the order
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderData.K2Parameters">
            <summary>
            Get/Set the list of strategy parameters for the order - based on FIX Protocal ADTL
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.OrderGroup">
            <summary>
            Provide a way to group a set of orders that must be processed
            by some algo as a group - note that a Strategy may have one or more
            order groups
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderGroup.AddOrder(KaiTrade.Interfaces.Order)">
            <summary>
            add an order to the group
            </summary>
            <param name="myOrder"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderGroup.CalculateCurrentPNL">
            <summary>
            Get/calculate the current PNL
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderGroup.CalcAvgPx">
            <summary>
            return the average px of all the orders - note this
            only makes sense for the same product
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderGroup.IsGroupMember(System.String)">
            <summary>
            Detect if the ID is a member of the group
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderGroup.IsCompleted">
            <summary>
            Returns whether or not a particular group of
            orders has completed i.e. that there are no more
            expected transactions for any of the individual orders
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderGroup.Cancel">
            <summary>
            Cancel any working orders in the group
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderGroup.ReplaceOrder(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Edit the order for the ID specified
            </summary>
            <param name="newQty">new qty if specified</param>
            <param name="newPrice">new price if specified</param>
            <param name="newStopPrice">new stop price if specified</param>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.ID">
            <summary>
            get the unique id for the group
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.Orders">
            <summary>
            get a list of the groups orders
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.ShortWorkingQty">
            <summary>
            Get the short working qty of the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.LongWorkingQty">
            <summary>
            Get the LongWorking qty for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.LongQty">
            <summary>
            Get the LongWorking qty for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.ShortQty">
            <summary>
            get the short pending qty
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.ShortFilledQty">
            <summary>
            get the short filled qty
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.Position">
            <summary>
            return the position (long filled - short filled) +ve => long
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.PotentialPosition">
            <summary>
            return the potential position (long filled - short filled) +ve => long, this includes working and pending qty
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.PNL">
            <summary>
            Get the PNL value based on last calculation
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.LongFilledQty">
            <summary>
            get the long filled qty
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.StepNumber">
            <summary>
            Get the user defined step numbers - typically used to apply a sequence of actions to the group
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.Expiration">
            <summary>
            Time in ticks that the order group expires - used in some
            algos to expire groups that for example have not completed in a given period
            of time
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.Tag">
            <summary>
            get/set a user defined tag to the group
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.OrderQty">
            <summary>
            Get the the total order qty for the group - i.e. the sum of 
            all the individual order qtys
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.OrderGroup.WorkingQty">
            <summary>
            Get the total working qty for the grouo i.e. the sum of all the working qtys (-ve => short)
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.OrderManager">
            <summary>
            Defines an interface that any object manageing a set of 
            orders for KaiTrade must impliment
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.CreateOrder">
            <summary>
            Create a new order and register it in the manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.RegisterOrder(KaiTrade.Interfaces.Order)">
            <summary>
            Register an order with the manager - used when the order is created elsewhere
            e.g. when loaded from a file. You should normally use CreateOrder to get an Order
            </summary>
            <param name="?"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.InvertSide(System.String)">
            <summary>
            Invert the side passed in
            </summary>
            <param name="mySide"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.AssociateClOrdID(System.String,KaiTrade.Interfaces.Order)">
            <summary>
            Associate a ClOrdID with a particular order
            </summary>
            <param name="myClOrdID"></param>
            <param name="myOrder"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.GetOrder(System.String)">
            <summary>
            Get an order for the ID passed in
            </summary>
            <param name="myOrderID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.GetOrderWithClOrdIDID(System.String)">
            <summary>
            Get an order using a CLOrdID
            </summary>
            <param name="myID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.DeleteOrder(System.String)">
            <summary>
            Delete the order from manager
            </summary>
            <param name="myID"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.GetOrderIDS">
            <summary>
            Get a list of order ID's
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.GetOrderIDS(System.String)">
            <summary>
            Get list of order IDs for the specified user
            </summary>
            <param name="UserID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.LoadOrdersFromFile(System.String)">
            <summary>
            Load orders from a file
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.StoreOrdersToFile(System.String)">
            <summary>
            Store Orders in a file
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.ToTabSeparated">
            <summary>
            Return an order as tab separated
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.SetChanged(System.String)">
            <summary>
            indicate that the order has changed
            </summary>
            <param name="myID"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.OrderManager.RecordExecutionReport(System.String,QuickFix.Message)">
            <summary>
            Record an incomming execution report - will return false
            if the report has been processed already
            </summary>
            <param name="myID"></param>
            <param name="myExecRep"></param>
            <returns>false if report exists</returns>
        </member>
        <member name="T:KaiTrade.Interfaces.PositionPublisher">
            <summary>
            Defines the interface for our position publisher
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.ProductManager">
            <summary>
            Defines an interface that any object manageing a set of 
            products for KaiTrade must impliment
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.GetProductID">
            <summary>
            Get a list of all the product identifiers 
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.CreateProduct(System.String)">
            <summary>
            Create a product based on its Mnemonic
            </summary>
            <param name="myMnemonic"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.CreateProductWithSecID(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a product based on its security ID
            </summary>
            <param name="myUserName">users mnemonic - the product is assigned this mnemonic if specified</param>
            <param name="myTradeVenue">Venue where the product is traded</param>
            <param name="myExchange">Exchange</param>
            <param name="mySecID">Product ID</param>
            <param name="mySecIDSrc">ID source - type of ID e.g. reuter, bloomberg etc</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.CloneProduct(System.String)">
            <summary>
            Make a clone of a product
            </summary>
            <param name="ID">identity of the product we will clone</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.RegisterProduct(KaiTrade.Interfaces.TradableProduct)">
            <summary>
            Register a product with the manager - this will add the product to the manager
            if its not already and assign its mnemonic into the mnemonic product map.
            Note previously registered products will be replaced
            </summary>
            <param name="product"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.AddProduct(KaiTrade.Interfaces.ProductData)">
            <summary>
            Add a product based on its product data - an exception will be thrown if the product exists
            otherwise it return the id of the product added
            </summary>
            <param name="productData"></param>
            <returns>the ID of the product added</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.LoadProduct(KAI.kaitns.Product)">
            <summary>
            Load a product based on its xml databinding
            If the product already exists return the existing product
            the existance is based on the KAIID, then on Mnemonic within a trade venue
            </summary>
            <param name="myProduct">product as a databinding object</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.CreateProductWithSymbol(System.String,System.String,System.String,System.String)">
            <summary>
            Create a product based on its symbol
            </summary>
            <param name="myUserName"></param>
            <param name="myTradeVenue"></param>
            <param name="myExchange"></param>
            <param name="mySymbol"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.GetProduct(System.String)">
            <summary>
            Get a product from the manager using its identity
            </summary>
            <param name="myID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.GetProductMnemonic(System.String)">
            <summary>
            Get a product from the manager using the Mnemonic
            </summary>
            <param name="myMnemonic"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.ToFile(System.String)">
            <summary>
            Save products to the file specified
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.ToFile(System.String,System.String)">
            <summary>
            Save products for a particular venue to the file specified
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.MLProductsToFile(System.String)">
            <summary>
            Save multi leg products to  the file specified
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.FromFile(System.String)">
            <summary>
            Load the manager from a file of data bindings
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.LoadProductsCSV(System.String)">
            <summary>
            Load products from a CSV file
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.ApplySecurityDefinition(QuickFix.Message)">
            <summary>
            Apply a FIX security defintion message to the products
            we manage - this will add or update an existing entry
            </summary>
            <param name="mySecDef"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.RemoveProduct(System.String)">
            <summary>
            remove the product with the ID specified
            </summary>
            <param name="myID"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductManager.GetProducts(System.String,System.String,System.String)">
            <summary>
            Get a list of products for a given by venue and cficode(type)
            </summary>
            <param name="venueCode"></param>
            <param name="exchange"></param>
            <param name="CFICode"></param>
            <returns></returns>
        </member>
        <member name="T:KaiTrade.Interfaces.PriceAlg">
            <summary>
            This interface defines an algorithm that can be associcated with a object
            that reacts to price changes - for example used to set prices on a pairs trader
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.PriceAlg.Reset">
            <summary>
            Reset the alg to its starting state
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.PriceAlg.Enter">
            <summary>
            Enter the strategy - action depends on implimenting class
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.PriceAlg.Exit">
            <summary>
            Exit the strategy - action depends on implimenting class
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.PriceAlg.GetParameterValue(System.String)">
            <summary>
            Get a setting value by name - used to get alg parameters
            </summary>
            <param name="myName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PriceAlg.SetParameterValue(System.String,System.String)">
            <summary>
            Set a alg setting by name, used to set parameters used by the alg
            </summary>
            <param name="myValue"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.PriceAlg.GetParameterNames">
            <summary>
            Get a list of avalaible parameters for the alg
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PriceAlg.ClearParameters">
            <summary>
            Clear the algo parameters
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PriceAlg.Name">
            <summary>
            Get the name of this alg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PriceAlg.State">
            <summary>
            get the state of the price alg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PriceAlg.Product">
            <summary>
            Set the product that will be tracked
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PriceAlg.Strategy">
            <summary>
            Get/Set the strategy used for trades if required
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.PriceAlg.Order">
            <summary>
            Get/Set a single order to be processed - use either strategy or order
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.Status">
            <summary>
            Defines the states a publisher or other object can have
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.Publisher">
            <summary>
            Defines an object that can publish data about some specific topic
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Publisher.Subscribe(KaiTrade.Interfaces.Subscriber)">
            <summary>
            Subscribe the observer specified to the subject
            </summary>
            <param name="mySubscriber">some susbcriber interface</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Publisher.UnSubscribe(KaiTrade.Interfaces.Subscriber)">
            <summary>
            Unsubscribe the subscriber passed
            </summary>
            <param name="mySubscriber">some subscriber</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Publisher.TopicID(System.String)">
            <summary>
            Return a key based on the state data passed in
            </summary>
            <param name="myData"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Publisher.TopicID">
            <summary>
            Return a key for the this subject that can be used to 
            look up the subject in some map of subjects
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Publisher.Open(System.String)">
            <summary>
            Open the subject passing data used by this type
            of subject.
            </summary>
            <param name="myData">Data (XML) used by the subject</param>
            <returns>A key that can be used to lookup the subject</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Publisher.Close">
            <summary>
            Close this subject 
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Publisher.OnImage(System.Collections.Generic.List{KaiTrade.Interfaces.Field})">
            <summary>
            Called by a client/data feed with a complete set of fields - this sets up an image in the subject
            </summary>
            <param name="itemList">list of items</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Publisher.OnUpdate(System.Collections.Generic.List{KaiTrade.Interfaces.Field})">
            <summary>
            Called by a client/data feed when one or more fields value changes
            </summary>
            <param name="itemList">list of changed items</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Publisher.OnUpdate(System.String,System.String)">
            <summary>
            update some arbitary field in the publisher - note not all publishers
            may support this
            </summary>
            <param name="myID"></param>
            <param name="myValue"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Publisher.OnUpdate(System.String,KaiTrade.Interfaces.PXUpdate)">
            <summary>
            Update the publisher with some price update - not all publishers
            will action this.
            </summary>
            <param name="pxUpdate"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Publisher.OnStatusChange(System.Collections.Generic.List{KaiTrade.Interfaces.Field})">
            <summary>
            Called when the client/datafeed status changes
            </summary>
            <param name="itemList"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.Publisher.FieldList">
            <summary>
            Get/Set the fields list for the publisher - setting this will replace all
            existing fields in the publisher and issue an image
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Publisher.Status">
            <summary>
            get/set the publisher base status - will event all subscribers
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Publisher.Tag">
            <summary>
            User defined string tag
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Publisher.PublisherType">
            <summary>
            Get/Set the publisher type - this is user defined
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.PublisherManager">
            <summary>
            Defines the interface of an object that can manage a set of publishers
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.PublisherManager.Add(KaiTrade.Interfaces.Publisher)">
            <summary>
            Add/replace a publisher to the manager
            </summary>
            <param name="myPub"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.PublisherManager.Remove(KaiTrade.Interfaces.Publisher)">
            <summary>
            remove a publisher
            </summary>
            <param name="myPub"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.PublisherManager.GetPublisher(System.String,System.String,System.Boolean)">
            <summary>
            Get the publisher for the TopicID, create one if needs be
            </summary>
            <param name="myType">Defines the type of subject to Get</param>
            <param name="myTopicID">Provides the topic id for the publisher</param>
            <param name="register">if true then the publisher is registered with the manager, if not it is simply created</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PublisherManager.GetPublisher(System.String)">
            <summary>
            Get a publisher for the topic specified - return null if not found
            </summary>
            <param name="myTopicID"></param>
            <returns>null => not found</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.PublisherManager.AddInstanceFactory(KaiTrade.Interfaces.PublisherType,KaiTrade.Interfaces.K2InstanceFactory)">
            <summary>
            Add an instance factory to the publisher manager - this lets 3rd parties
            add new publishers
            </summary>
            <param name="publisherType">price or general</param>
            <param name="publisherFactory">factory that can create publishers</param>
        </member>
        <member name="M:KaiTrade.Interfaces.PublisherManager.GetPublisherTypes">
            <summary>
            Get a list of all the available publisher types
            </summary>
            <returns></returns>
        </member>
        <member name="T:KaiTrade.Interfaces.RunningSpreadTrade">
            <summary>
            This represents a running spread trade, this is usually created by a SpreadTrade object
            the spread trade object can ahve many associated running spread trades.
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.RunningSpreadTrade.Enter(System.String,System.Double,System.Double)">
            <summary>
            Activate the pair trade
            </summary>
            <param name="mySide"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.RunningSpreadTrade.Exit(System.Boolean,System.Boolean)">
            <summary>
            Exit a pair/spread trade
            </summary>
            <param name="myCancel"></param>
            <param name="myFlatten"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.RunningSpreadTrade.Tick">
            <summary>
            Tick the spread trade - this allows it to do work on a timed basis
            such as processing slices
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.Identity">
            <summary>
            return the unique ID of this running spread trade
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.InstanceCount">
            <summary>
            return the count of the current instance - this is used to create
            a name that refelects each individual instance of the
            object - the Identity could be used but its very long for a grid
            Note that is never persisted
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.RunningSpreadTradeUpdate">
            <summary>
            Delegate used to get events from a spread alg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.Status">
            <summary>
            Get the status of the pairs trade
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.MaxSlice">
            <summary>
            Maximum size exposed to the market
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.LeavesQty">
            <summary>
            Get the remaining qty to trade
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.PotentialQty">
            <summary>
            Get the remaining qty to trade
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.Size">
            <summary>
            Size/Qty of the pair to buy or sell
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.BuyLevel">
            <summary>
            The level value to be applied to prices in this spread trade
            this an decimal value added or subtracted to price when the
            spread is bought
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.SellLevel">
            <summary>
            The level value to be applied to prices in this spread trade
            this an decimal value added or subtracted to price when the
            spread is sold
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.BuyQty">
            <summary>
            Total qty to buy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.SellQty">
            <summary>
            Total qty to sell
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.Strategy">
            <summary>
            Get/Set the stategy that will execute the pairs orders
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.RunningSpreadTrade.StrategyGroup">
            <summary>
            Get the strategy group currently in use.
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.Session">
            <summary>
            Interface of an object that represents a sessino between a user of 
            the system and a remote instance of KaiTrade
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Session.Identity">
            <summary>
            Get the unique identifer for the sesssion
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Session.UserID">
            <summary>
            Get/Set the user associated with the session
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Session.CorrelationID">
            <summary>
            Set the session correlation ID
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.SessionManager">
            <summary>
            Interface of a on object that manages a set of sessions
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.SessionManager.CreateSession(System.String)">
            <summary>
            Create an empty session and register it in the manager
            </summary>
            <param name="correlationID">Identifier to the physical session in
            some service or adapter</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SessionManager.GetSessionIDs">
            <summary>
            Get a list of session IDs
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SessionManager.GetSession(System.String)">
            <summary>
            Get a session given its unique ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SessionManager.GetSessionWithCorrelationID(System.String)">
            <summary>
            Get the session for some correlation ID
            </summary>
            <param name="correlationID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SessionManager.GetUserCurrentSession(System.String)">
            <summary>
            Get the current session for some user identity
            </summary>
            <param name="correlationID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SessionManager.AssociateUserCorrelation(System.String,System.String)">
            <summary>
            Associate a user and correlationID into a session - will create the session if needed
            </summary>
            <param name="userIdentity"></param>
            <param name="correlationID"></param>
            <returns>session that maps the user to a correlationID</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SessionManager.AssociateSessionWithUser(System.String,System.String)">
            <summary>
            Associate a session with a user 
            </summary>
            <param name="sessionID">session id of the session to associate - must exist</param>
            <param name="userIdentity">user identity to associate with</param>
        </member>
        <member name="T:KaiTrade.Interfaces.SpreadManager">
            <summary>
            Interface of an object that manages a set of spread trades
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadManager.CreateSpreadTrade">
            <summary>
            Create a spread trade and register it in the manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadManager.GetSpreadTrade(System.String)">
            <summary>
            Get a spread trade based on its ID
            </summary>
            <param name="myID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadManager.GetSpreadTradeWithName(System.String)">
            <summary>
            Get a spread trade based on its Name
            </summary>
            <param name="myName"> spreads name</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadManager.GetIDs">
            <summary>
            Get a list of all the pair/spread ids
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadManager.FromFile(System.String)">
            <summary>
            Load the manager from a file of data bindings
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadManager.ToFile(System.String)">
            <summary>
            Store the manager from a file of data bindings
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadManager.Tick">
            <summary>
            Apply a timer tick to all the pairs
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.SpreadTradeStatus">
            <summary>
            The valid states of a pair
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.SpreadTrade">
            <summary>
            This interface represents an object that provides spread trading function
            In general a spread trade consists of parameters to control the spread/pairs trade
            and a strategy used to execute the spread orders.
            A spread trade will have 0..N running spread trades, these actually represent an 
            instance of a 1 or more trades running together - the spread trade object itself acts
            as a sort of templte to run manage them running spread trades
            
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadTrade.GetRunningSpreadTrades">
            <summary>
            Get a list of all the running strategies for the pair trade
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadTrade.Enter(System.String,System.Double,System.Double)">
            <summary>
            Enter/Activate the pair trade
            </summary>
            <param name="mySide"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadTrade.Exit(System.Boolean,System.Boolean)">
            <summary>
            Exit a pair/spread trade
            </summary>
            <param name="myCancel"></param>
            <param name="myFlatten"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadTrade.UpdateRunningTrades">
            <summary>
            Update the parameters in each running spread based on the current setting of the spreadtrade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadTrade.GetMaxTradeQty(System.Int64,System.String)">
            <summary>
            Get the maximum qty that can be traded based on 
            the hang allowence and the available qty in the
            market for the spread
            </summary>
            <param name="myDesiredQty"></param>
            <param name="mySide">side of the trade we wish to place</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadTrade.FromXMLDB(KAI.kaitns.SpreadTrade)">
            <summary>
            Set up a spread trade from an XML data binding
            </summary>
            <param name="myOrder"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadTrade.ToXMLDB">
            <summary>
            write spread trade onto an XML data bining
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadTrade.Tick">
            <summary>
            Tick the spread trade - this allows it to do work on a timed basis
            such as processing slices
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.SpreadTrade.QuotedCount">
            <summary>
            Number of products that are quoted - i.e. will be sumbimitted into the market
            </summary>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.ID">
            <summary>
            Get the unique ID for this spread trade
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.Name">
            <summary>
            User friendly name
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.Mnemonic">
            <summary>
            Mnemonic used for the trade - should be a multi leg product
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.PriceConvention">
            <summary>
            Price calculation used to calculate the multileg spread price
            ratio, pairs ect
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.BuyLevel">
            <summary>
            The level value to be applied to prices in this spread trade
            this an decimal value added or subtracted to price when the
            spread is bought
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.SellLevel">
            <summary>
            The level value to be applied to prices in this spread trade
            this an decimal value added or subtracted to price when the
            spread is sold
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.QuantityConvention">
            <summary>
            Is the qty represented as a number of shares or a monetary amount to but
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.Side">
            <summary>
            Are we buying or selling the spread
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.BuyQty">
            <summary>
            Total qty to buy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.SellQty">
            <summary>
            Total qty to sell
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.MaxSlice">
            <summary>
            Maximum size exposed to the market
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.LeavesQty">
            <summary>
            Get the remaining qty to trade
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.PotentialQty">
            <summary>
            Get the potential  qty  i.e. whats left in the market to trade
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.Size">
            <summary>
            Size/Qty of the pair to buy or sell
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.HangAllowence">
            <summary>
            Maximum imbalence before the pair will pause trading
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.HangQuantity">
            <summary>
            Get the curretly hung qty for the spread
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.PriceTrackerAlg">
            <summary>
            Alg used to maintain the prices of quoted orders relative to the market PX
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.UsePriceTracker">
            <summary>
            Get/Set if we will use a price tracker alg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.PayUpCount">
            <summary>
            Number of payups that will be made to trade a side 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.PayUpInterval">
            <summary>
            Interval between payups in ms
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.PayUpAmount">
            <summary>
            Amount as a price that will be added/deducted in an attempt to trade a leg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.TimeToMarket">
            <summary>
            Time before a leg that has not traded is converted to a leg - to force it to trade
            0 => no conversion
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.Strategy">
            <summary>
            Get/Set the stategy that will execute the pairs orders
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.RunSequenceNumber">
            <summary>
            Get the run sequence number - this is incremented each time the pair
            is executed in a given session (i.e. user logon) - it is not unique
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.Product">
            <summary>
            Get/Set the product associated with the pair/spread
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.StrategyGroup">
            <summary>
            Get the group of strategies associated with the pair
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.Status">
            <summary>
            Get the status of the pairs trade
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SpreadTrade.SpreadTradeUpdate">
            <summary>
            Delegate used to get events from a spread alg
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.StrategyState">
            <summary>
            Basic state of a strategy
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.StrategyChanged">
            <summary>
            Delegate to indicate that the strategy has changed in some way
            </summary>
            <param name="strategy"></param>
        </member>
        <member name="T:KaiTrade.Interfaces.Strategy">
            <summary>
            Models a strategy that we will run in the system - in gerneral some of the
            strategy properties act as a default, in terms of multi-leg products the
            leg values always override the strategy values. For example 2 legs can trade on
            different venues and thus have different accounts.
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.AddAlgParameter(System.String,System.String)">
            <summary>
            Add a single paramter to the Strategy - these are used by the
            algo running in the strategy
            </summary>
            <param name="myID"></param>
            <param name="myValue"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.GetAlgParameterValue(System.String)">
            <summary>
            Get the value of a parameter used by algos running in this strategy
            </summary>
            <param name="myID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.ClearAlgParameters">
            <summary>
            Clear all algo parameters
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.SetAlgParameters">
            <summary>
            Set the algos parameters
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.SetStrategyProperty(System.String,System.String,System.String)">
            <summary>
            Set a strategy internal property
            </summary>
            <param name="myID">parameter name</param>
            <param name="myValue">parameter value</param>
            <param name="myRunIdentifier">the run identifier(excel row or id) - if empty applies in general to the strategy</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.ResetChangedParameters">
            <summary>
            Reset the list of changed parameters - all are set to not changed
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.AllParametersUpdated(System.Collections.Generic.List{System.String})">
            <summary>
            Checks if all the parameter names on the lits have been changed/updated/added
            </summary>
            <param name="names">list of parameter names</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.GetOrders">
            <summary>
            Get a list of orders that are associated with this strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.AddOrder(KaiTrade.Interfaces.Order)">
            <summary>
            Add an order to the strategy
            </summary>
            <param name="myOrder"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.PriceInValidRange(System.String,System.Double)">
            <summary>
            Test if a price is in a valid range - NOT AVAILABLE FOR ALL ALGOS NOTE: DEFAULT IS TRUE
            You *MUST* set the MaxPrice and MinPrice first
            </summary>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.GetPNL">
            <summary>
            get the PnL for the strategy - calculated when accessed 
            not you need prices for this.
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.GetAveragePrice">
            <summary>
            Get the average price for all the fills on the strategy 
            NOTE - Should only be used for single leg strategies, else it is the  average
            over N products
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.Tick(System.DateTime)">
            <summary>
            Called to get the strategy to do time based processing, for example
            to exit strategies after a time period (end time)
            </summary>
            <param name="myTime">time to use in any operations e.g. from an API to override
            the time on the PC</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.Enter(System.Boolean)">
            <summary>
            Enter the strategy - action depends on implimenting class, in general this is
            the prefered way to run or submit orders in a strategy
            </summary>
            <param name="myReEnter">if true - a strategy in the entered state can be renetered</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.Exit">
            <summary>
            Exit the strategy - action depends on implimenting class
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.HandleTradeSignal(KaiTrade.Interfaces.TradeSignal)">
            <summary>
            Process a Trade signal
            </summary>
            <param name="mySignal"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.Submit">
            <summary>
            Submit the strategy based on its default values
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.Submit(System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{KaiTrade.Interfaces.K2Parameter})">
            <summary>
            Submit an order for this strategy
            </summary>
            <param name="myQty">applied to all the oustanding orders according to ratios in product legs</param>
            <param name="myQtyLimit">may qty bought or sold for the strategy</param>
            <param name="myPrice">applied to all the oustanding orders according to ratios in product legs</param>
            <param name="myStopPx">stop price if applicable</param>
            <param name="mySide"></param>
            <param name="myOrderType"></param>
            <param name="myTimeType"></param>
            <param name="myDateTime"></param>
            <param name="myAccount">account id will override venue and product account</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.Cancel">
            <summary>
            Cancel any outstanding orders associated with this strategy
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.CancelBuy">
            <summary>
            Cancel any buy orders
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.CancelSell">
            <summary>
            Cancel any sell order
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.Reset">
            <summary>
            Reset - the strategy to its new condition, reset any internal collections and states
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.Flatten">
            <summary>
            Flatten positions and cancel working
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.Replace(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Modify any oustanding orders
            </summary>
            <param name="newQty"></param>
            <param name="newPrice"></param>
            <returns>number of orders affected</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.HandleExecReport(QuickFix.Message,KaiTrade.Interfaces.Order)">
            <summary>
            Handle an Exec report for an order belonging to a strategy
            the primitive gandling of the exec report on the order itself will have been done
            exec reports always relate to an actual order in the market
            </summary>
            <param name="myExec">fix execution report</param>
            <param name="myOrd">order the execution report applies to </param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.HandleReject(QuickFix.Message,KaiTrade.Interfaces.Order)">
            <summary>
            Handle an reject report for an order belonging to a strategy
            the primitive gandling of the exec report on the order itself will have been done
            reject reports always relate to an actual order in the market
            </summary>
            <param name="myExec">fix execution report</param>
            <param name="myOrd">order the execution report applies to </param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.RefreshPosition">
            <summary>
            Refresh the position of the Strategy, will iterate the orders to 
            total position
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.SubscribeTriggers(KaiTrade.Interfaces.Facade,System.String,System.String)">
            <summary>
            Subscribe to the Enter and Exit Triggers - given the names provided, these are items 
            in the Trigger publisher
            </summary>
            <param name="myEntryTrgname">name of entry trigger field</param>
            <param name="myExitTrgName">name of exit  trigger field</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.AddExitTriggerName(System.String,System.Boolean)">
            <summary>
            Add an exit trigger
            </summary>
            <param name="name">name of trigger</param>
            <param name="isSet">state of trigger</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.AddEntryTriggerName(System.String,System.Boolean)">
            <summary>
            Add an entry trigger
            </summary>
            <param name="name">name of trigger</param>
            <param name="isSet">state of trigger</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.EncodeType(KaiTrade.Interfaces.StrategyType)">
            <summary>
            convert the strategy type enum to a string
            </summary>
            <param name="myType"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.DecodeType(System.String)">
            <summary>
            Convert the string representation of strategy type to the enum
            </summary>
            <param name="myType"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.FromXMLDB(KAI.kaitns.Strategy)">
            <summary>
            Set up strategy from an XML data binding
            </summary>
            <param name="myOrder"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.ToXMLDB">
            <summary>
            write strategy onto an XML data bining
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.ToAtdl">
            <summary>
            render the strategy in ATDL (FIX Algorithmic Trading Definition Language)
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.AddOrderGroup(KaiTrade.Interfaces.OrderGroup)">
            <summary>
            Add an order group to the strategy
            </summary>
            <param name="myGrp"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.GetOrderGroup(System.String)">
            <summary>
            Get an order group with its ID
            </summary>
            <param name="myID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.AddLegOrderGroup(System.String,KaiTrade.Interfaces.OrderGroup)">
            <summary>
            Add an order group for a particular Leg ID
            </summary>
            <param name="myLegID">unique idenitfier for the leg</param>
            <param name="myGrp">order group</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.GetLegOrderGroup(System.String)">
            <summary>
            Get an order group for the Leg ID specified - this will create the group if required
            </summary>
            <param name="myID">Leg idebtifier</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Strategy.GetOrderGroups">
            <summary>
            Get all of the strategy order groups - excluding the LEG Groups
            </summary>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Identity">
            <summary>
            Get the Identity of the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.StrategyData">
            <summary>
            Get set the underlying dataobject - the data object is a data contract
            used for WCF services - can be null is this mechanism is not supported
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.UserID">
            <summary>
            Get/Set user(systemID) that the order belongs to 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Type">
            <summary>
            get/set the type of strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.State">
            <summary>
            Get the state of the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.StrategyChanged">
            <summary>
            used to connect delegates for the strategy changed event
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.ORAlgorithm">
            <summary>
            get/set the algorithm used to process orders in the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.ORAlgorithmName">
            <summary>
            Get/Set the name of the OR Alg used in the strategy
            this is used for load/store of the strategy so that we can
            create an instance of the alg as required.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.PXAlgorithm">
            <summary>
            get/set the algorithm used to handle price changes for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.PXAlgorithmName">
            <summary>
            Get/Set the name of the PXAlgorithm used in the strategy
            this is used for load/store of the strategy so that we can
            create an instance of the alg as required.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.AlgParameters">
            <summary>
            get/set the list of parameters used with the alg
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.ParameterBag">
            <summary>
            Get/Set paramters as a string delimited bag of values
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.UserName">
            <summary>
            get/set the users namer for the strategy - more friendly than the GUID ID
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.LastOrdIdentity">
            <summary>
            get the identity of the last order submitted for this strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.ProductID">
            <summary>
            Get the product ID associated with the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Mnemonic">
            <summary>
            Get/Set the product mnemonic
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.DataMnemonic">
            <summary>
            Get/Set the data mnemonic, this is used when accessing data if specified
            if this is not use then the base Mnemonic is used for both. It helps when
            you want to get data from one venue and trade on another
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Product">
            <summary>
            Get/Set the strategy product
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Account">
            <summary>
            Get/Set the account for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Side">
            <summary>
            Get the default side of this strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.SideAsString">
            <summary>
            Get the default side of this strategy as a string
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.OrdTypeAsString">
            <summary>
            get/set the default order type
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.ShortSaleLocate">
            <summary>
            If the side is Short Sell this needs to be used
            to specify where the products are held
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.OrdType">
            <summary>
            get/set the default order type
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.TimeInForce">
            <summary>
            get/set the default TimeInForce
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.TIFDateTime">
            <summary>
            get/set the default date time for the time in force
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Qty">
            <summary>
            Set the default qty  for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.MaxFloor">
            <summary>
            Get/Set the max floor
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Price">
            <summary>
            Set the default price  for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.StopPx">
            <summary>
            Get/Set the stop PX for the strategy - note the behaviour 
            depends on the type of strategy, in general this works only for
            single legs
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.QtyLimit">
            <summary>
            Set the qty limit for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.MaxIterations">
            <summary>
            Get/Set the maximum number of iterations that are allowed in any
            run of the strategy - for example how many scalp orders sets
            can be placed
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.MaxEntries">
            <summary>
            Get/Set the maximum number of times the strategy may be entered - this is reset
            when a strategy is loaded or created, unlike max iterations which is the max number of 
            runs/orders perminted in each entry, this is the max number of times you
            can enter the strategy. It defaults to -1 i.e. not limited
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.MaxPrice">
            <summary>
            Max price for the strategy: max price allowed on any orders from the strategey - confirm that the algo used supports this
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.MinPrice">
            <summary>
            Min price for the strategy: min price allowed on any orders from the strategey - confirm that the algo used supports this
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.ShortWorkingQty">
            <summary>
            Get the short working qty of the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.LongWorkingQty">
            <summary>
            Get the LongWorking qty for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.LongPotentialQty">
            <summary>
            Get the Long potential how many *could* be filled) qty for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.ShortPotentialQty">
            <summary>
            get the short potential (how many *could* be filled) qty
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.ShortFilledQty">
            <summary>
            get the short filled qty
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Position">
            <summary>
            return the position (long filled - short filled) +ve => long
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.PotentialPosition">
            <summary>
            return the potential position (long filled - short filled) +ve => long, this includes working and pending qty
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Working">
            <summary>
            return the working qty (long working - short working) +ve => long
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.LongFilledQty">
            <summary>
            get the long filled qty
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.LastEnterTime">
            <summary>
            get the datetime of when the strategy was last entered
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.FlattenOnExit">
            <summary>
            Determines if we flatten position on Exit
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.CancelOnExit">
            <summary>
            Determines if we cancels working orders  on Exit
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.UseStrategyTimes">
            <summary>
            determine if we use the strategies start and end times
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.StartTime">
            <summary>
            Time of day the strategy can run from(start time) - if specified not time limits
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.EndTime">
            <summary>
            Time of day the strategy can run to(end time) - if specified not time limits
            if the strategy is an enter state when the end time passes the strategy will
            Exit and obey any exit rules in force
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.TriggerName">
            <summary>
            Get the trigger name used for this strategy - THIS IS Depricated
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.EntryTriggerName">
            <summary>
            Get/Set entry trigger name - this will be depricated to support multiple trigger names
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.ExitTriggerName">
            <summary>
            Get/Set exit trigger name - this will be depricated to support multiple trigger names
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.AutoConnectTrg">
            <summary>
            get/set whether the strategy will attempt to auto connect the enter and exit
            trigger names to constions in the trade venue 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.ConditionInterval">
            <summary>
            Get/Set the interval used on conditions
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Enabled">
            <summary>
            Get/Set the enabled flag for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Compeleted">
            <summary>
            number of complete runs - e.g. a fully sequence buy-sell etc is done
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.RunCount">
            <summary>
            how many time we have run
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.RunIdentifier">
            <summary>
            The identifier for a particuar run/entry  of the strategy
            can be used to publish status and information from a particular run
            for example fills for a particular run.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.CorrelationID">
            <summary>
            Identifier used to track a trade system use of orders, strategeies and algos against some
            ID
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.TSQueryGroupPath">
            <summary>
            Get/Set the path of a TS Query group that may be used in the
            strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Info">
            <summary>
            Free format info about the strategy - for example output from an Algo
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Strategy.Initialized">
            <summary>
            Has the strategy been initialized?
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.StrategyData">
            <summary>
            Represents the base data in a strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.Identity">
            <summary>
            Get the Identity of the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.AutoCreate">
            <summary>
            Get set AutoCreate, if true then the system will create the strategy if needed without
            the user needed to do an explicit add
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.UserID">
            <summary>
            Get/Set user(systemID) that the strategy belongs to 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.CorrelationID">
            <summary>
            Identifier used to track a trade system use of orders, strategeies and algos against some
            ID
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.Type">
            <summary>
            get/set the type of strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.State">
            <summary>
            Get the state of the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.ORAlgorithmName">
            <summary>
            Get/Set the name of the OR Alg used in the strategy
            this is used for load/store of the strategy so that we can
            create an instance of the alg as required.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.PXAlgorithmName">
            <summary>
            Get/Set the name of the PXAlgorithm used in the strategy
            this is used for load/store of the strategy so that we can
            create an instance of the alg as required.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.ParameterBag">
            <summary>
            Get/Set paramters as a string delimited bag of values - used to persisit K2Parameters
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.K2Parameters">
            <summary>
            Get set the list of parameters associated with the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.UserName">
            <summary>
            get/set the users namer for the strategy - more friendly than the GUID ID
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.LastOrdIdentity">
            <summary>
            get the identity of the last order submitted for this strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.ProductID">
            <summary>
            Get the product ID associated with the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.Mnemonic">
            <summary>
            Get/Set the product mnemonic
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.DataMnemonic">
            <summary>
            Get/Set the data mnemonic, this is used when accessing data if specified
            if this is not use then the base Mnemonic is used for both. It helps when
            you want to get data from one venue and trade on another
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.Account">
            <summary>
            Get/Set the account for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.Side">
            <summary>
            Get the default side of this strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.ShortSaleLocate">
            <summary>
            If the side is Short Sell this needs to be used
            to specify where the products are held
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.OrdType">
            <summary>
            get/set the default order type
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.TimeInForce">
            <summary>
            get/set the default TimeInForce
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.TIFDateTime">
            <summary>
            get/set the default date time for the time in force
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.Qty">
            <summary>
            Set the default qty  for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.MaxFloor">
            <summary>
            Get/Set the max floor
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.Price">
            <summary>
            Set the default price  for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.StopPx">
            <summary>
            Get/Set the stop PX for the strategy - note the behaviour 
            depends on the type of strategy, in general this works only for
            single legs
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.QtyLimit">
            <summary>
            Set the qty limit for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.MaxIterations">
            <summary>
            Get/Set the maximum number of iterations that are allowed in any
            run of the strategy - for example how many scalp orders sets
            can be placed
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.MaxEntries">
            <summary>
            Get/Set the maximum number of times the strategy may be entered - this is reset
            when a strategy is loaded or created, unlike max iterations which is the max number of 
            runs/orders perminted in each entry, this is the max number of times you
            can enter the strategy. It defaults to -1 i.e. not limited
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.MaxPrice">
            <summary>
            Max price for the strategy: max price allowed on any orders from the strategey - confirm that the algo used supports this
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.MinPrice">
            <summary>
            Min price for the strategy: min price allowed on any orders from the strategey - confirm that the algo used supports this
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.FlattenOnExit">
            <summary>
            Determines if we flatten position on Exit
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.CancelOnExit">
            <summary>
            Determines if we cancels working orders  on Exit
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.UseStrategyTimes">
            <summary>
            determine if we use the strategies start and end times
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.StartTime">
            <summary>
            Time of day the strategy can run from(start time) - if specified not time limits
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.EndTime">
            <summary>
            Time of day the strategy can run to(end time) - if specified not time limits
            if the strategy is an enter state when the end time passes the strategy will
            Exit and obey any exit rules in force
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.AutoConnectTrg">
            <summary>
            get/set whether the strategy will attempt to auto connect the enter and exit
            trigger names to constions in the trade venue 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.ConditionInterval">
            <summary>
            Get/Set the interval used on conditions
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.Enabled">
            <summary>
            Get/Set the enabled flag for the strategy
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.Info">
            <summary>
            Free format info about the strategy - for example output from an Algo
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyData.Initialized">
            <summary>
            Has the strategy been initialized?
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.StrategyGroup">
            <summary>
            Models a group of strategies
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyGroup.AddStrategy(KaiTrade.Interfaces.Strategy)">
            <summary>
            Add a strategy to the group
            </summary>
            <param name="myStrategy"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyGroup.GetLastStrategy">
            <summary>
            Get the last added strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyGroup.GetWorkingQty">
            <summary>
            return the working qty of the group of strategies(long working - short working) +ve => long
            note that this can be a total  for different products and legs
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyGroup.GetPosition">
            <summary>
            return the position of the group of strategies(long filled - short filled) +ve => long
            note that this can be a total  for different products and legs
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyGroup.GetCurrentTradedQty(System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="myTradeQty"> ammount traded long fills + short fills</param>
            <param name="myPotentialTraded">potential amount that could trade</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyGroup.GetCurrentTradedQty(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get the current traded qty both Long and short
            </summary>
            <param name="myLongTradeQty"></param>
            <param name="myLongPotentialTraded"></param>
            <param name="myShortTradeQty"></param>
            <param name="myShortPotentialTraded"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyGroup.SetEnabled(System.Boolean)">
            <summary>
            Set the enabled flag for the strategies in this group
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyGroup.Cancel">
            <summary>
            Cancel any outstanding orders associated with this strategy group
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyGroup.Flatten">
            <summary>
            Flatten positions and cancel working posn in each strategy in the group
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyGroup.Exit">
            <summary>
            Exit the all strategies in the group - action depends on implimenting class
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.StrategyGroup.Strategies">
            <summary>
            Get a list of all the groups strategies
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.StrategyType">
            <summary>
            Defines types of strategy
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.StrategyManager">
            <summary>
            Defines an interface that any object manageing a set of 
            strategies for KaiTrade must impliment
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.GetStrategy(System.String)">
            <summary>
            Get a strategy using its Identity
            </summary>
            <param name="myID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.GetStrategyWithNickName(System.String,System.String)">
            <summary>
            Get a strategy using the users nick name
            </summary>
            <param name="userID">the user that owns the strategy</param>
            <param name="myNickName"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.GetStrategies">
            <summary>
            Get a list of strategy ID's
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.CreateStrategy(System.Boolean)">
            <summary>
            Create an empty strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.CreateStrategy(System.String,System.Boolean)">
            <summary>
            Create an empty strategy with a nickname
            </summary>
            <param name="myNickName">Name for the strategy</param>
            <param name="myEnabled">sets the strategy as enabled or not</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.DeleteStrategy(System.String)">
            <summary>
            Delete a strategy from the manager
            </summary>
            <param name="myID"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.RegisterStrategy(KaiTrade.Interfaces.Strategy)">
            <summary>
            Register a strategy - will replace exisiting entries
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.CreateStrategy(KaiTrade.Interfaces.TradableProduct)">
            <summary>
            Create a strategy based on a product
            </summary>
            <param name="myProduct"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.LoadStrategiesFromFile(System.String)">
            <summary>
            Load strategies from a file
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.StoreStrategiesToFile(System.String)">
            <summary>
            Store strategies in a file
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.StopAllRunning(System.String)">
            <summary>
            Stop all running strategies - this will cancel any working orders
            and set the strategy enable to false
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.GetAtdl(System.String)">
            <summary>
            render the strategy in ATDL (FIX Algorithmic Trading Definition Language)
            </summary>
            <param name="myID">ID of the strategy</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.StrategyManager.FromAtdl(System.String,System.String)">
            <summary>
            Create and Set up a strategy from ATDL (FIX Algorithmic Trading Definition Language)
            </summary>
            <param name="uid"></param>
            <param name="atdl"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.Subscriber.OnImage(KaiTrade.Interfaces.Publisher,System.Collections.Generic.List{KaiTrade.Interfaces.Field})">
            <summary>
            Called by a publisher with a complete set of fields - always the
            first message after a a subscriber  subcribes to some topic
            </summary>
            <param name="mySender">The sending publisher - can be null</param>
            <param name="itemList">list of fields and values</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Subscriber.OnUpdate(KaiTrade.Interfaces.Publisher,System.Collections.Generic.List{KaiTrade.Interfaces.Field})">
            <summary>
            Called by a publisher when one or more fields value changes
            </summary>
            <param name="mySender">The sending publisher - can be null</param>
            <param name="itemList">list of changed feilds</param>
        </member>
        <member name="M:KaiTrade.Interfaces.Subscriber.OnStatusChange(KaiTrade.Interfaces.Publisher,System.Collections.Generic.List{KaiTrade.Interfaces.Field})">
            <summary>
            Called when the subject status changes
            </summary>
            <param name="mySender">The sending publisher - can be null</param>
            <param name="itemList">list of status fields</param>
        </member>
        <member name="T:KaiTrade.Interfaces.Message">
            <summary>
            Defines an internal message used 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Message.TargetID">
            <summary>
            get/set TargetID (destination) for the message - NOTE *not* transmitted
            </summary>       
        </member>
        <member name="P:KaiTrade.Interfaces.Message.ClientSubID">
            <summary>
            get/set Client SubID
            </summary>       
        </member>
        <member name="P:KaiTrade.Interfaces.Message.TargetSubID">
            <summary>
            get/set target subID
            </summary>       
        </member>
        <member name="P:KaiTrade.Interfaces.Message.Format">
            <summary>
            Get/Set format - not transmitted
            </summary>      
        </member>
        <member name="P:KaiTrade.Interfaces.Message.AppSpecific">
            <summary>
            Get/Set AppSpecific - not transmitted
            </summary>       
        </member>
        <member name="P:KaiTrade.Interfaces.Message.AppState">
            <summary>
            Get/Set AppState - not transmitted
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Message.AppType">
            <summary>
            Get/Set App type not transmitted
            </summary>      
        </member>
        <member name="P:KaiTrade.Interfaces.Message.Tag">
            <summary>
            Get/Set Tag - not transmitted
            </summary>       
        </member>
        <member name="P:KaiTrade.Interfaces.Message.ClientID">
            <summary>
            get/Set cliewnt ID not transmitted
            </summary>       
        </member>
        <member name="P:KaiTrade.Interfaces.Message.UserID">
            <summary>
            get/Set user ID not transmitted
            </summary>       
        </member>
        <member name="P:KaiTrade.Interfaces.Message.VenueCode">
            <summary>
            get set the Venue Code that the message is intended for
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Message.CreationTime">
            <summary>
            get set creation time not transmitted
            </summary>        
        </member>
        <member name="T:KaiTrade.Interfaces.SyntheticPriceCalc">
            <summary>
            Defines an calculation algo that will act on the legs of a 
            synthetic product to calculate prices for the product
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.SyntheticPriceCalc.ReCalculate">
            <summary>
            Recalculate prices for all legs
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.SyntheticPriceCalc.LegUpdate(KaiTrade.Interfaces.Leg)">
            <summary>
            Apply a leg price update 
            </summary>
            <param name="myLeg"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.SyntheticPriceCalc.Name">
            <summary>
            return the calc name
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SyntheticPriceCalc.Product">
            <summary>
            Get/Set the product that this algo will calculate prices for
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.ApplyPXUpdate">
            <summary>
            Delegate for handling PXUpdates
            </summary>
            <param name="update"></param>
        </member>
        <member name="T:KaiTrade.Interfaces.TradableProduct">
            <summary>
            defines a product that can be traded - this includes 
            synthetic products composed on N legs
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.SetProperty(System.String,System.String)">
            <summary>
            Set some property in the product based on its name
            </summary>
            <param name="myPropName">name of the propterty/attribute</param>
            <param name="myPropValue"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.CalculateLegPrices(System.Boolean)">
            <summary>
            Set whether to calculate to leg prices
            </summary>
            <param name="bSubscribe">true => calculate prices false => do not calculate prices</param>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.ResetLegRatios">
            <summary>
            Reset the ratios of all legs for this product
            only used on multiLeg products
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.GetLeg(System.String)">
            <summary>
            Get the Leg associated with a mnemonic - or return null
            </summary>
            <param name="myMonika">monika name used to find the leg</param>
            <returns> a leg or null if leg does not exist</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.AddLeg(KaiTrade.Interfaces.Leg)">
            <summary>
            Add a leg to the product leg collection
            </summary>
            <param name="myLeg"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.AddLeg(KaiTrade.Interfaces.Leg,System.Int32)">
            <summary>
            Add a leg into the leg collection at a
            specific position. If a leg already exists at that 
            position it will be overwritten
            </summary>
            <param name="myLeg"></param>
            <param name="myPosition">0 based postion of the leg in the legs collection</param>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.GetImpliedLegPrice(System.String,System.Double,System.String)">
            <summary>
            Get the price implied in the target leg based on an input price for another product
            </summary>
            <param name="myBaseMnemonic"></param>
            <param name="myBasePrice"></param>
            <param name="myTargetMnemonic"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.GetImpliedLegPrice(System.String,System.Double,System.Int32)">
            <summary>
            Get the price implied in the target leg based on an input price for another product
            </summary>
            <param name="myBaseLegIndex"></param>
            <param name="myBasePrice"></param>
            <param name="myTargetLegIndex"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.GetImpliedLegPrice(System.Int32,System.Double,System.Int32)">
            <summary>
            Get the price implied in the target leg based on an input price for another product
            </summary>
            <param name="myBaseLegIndex"></param>
            <param name="myBasePrice"></param>
            <param name="myTargetLegIndex"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.GetImpliedLegPrice(System.Int32,System.String)">
            <summary>
            Get the implied price for the leg and side specified based on the other legs
            </summary>
            <param name="myBaseLegIndex"></param>
            <param name="myStrategySide">Is the spread being bought or sold</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.GetPairPxSz(System.String,System.Int32,System.Double@,System.Double@)">
            <summary>
            Return the price and Size for the side andleg index specified
            </summary>
            <param name="myStrategySide"></param>
            <param name="myIndex"></param>
            <param name="mySz"></param>
            <param name="myPx"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.GetLeg(System.String,System.String)">
            <summary>
            Get a leg based on its mnemonic and side
            </summary>
            <param name="myLegMnemonic"></param>
            <param name="mySide"></param>
            <returns>leg or null if not found</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.RemoveLeg(KaiTrade.Interfaces.Leg)">
            <summary>
            remove the leg passed from our list of legs
            </summary>
            <param name="myLeg"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.CreateLeg">
            <summary>
            Create a leg and add it to the leg collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.GetMnemonic">
            <summary>
            Generate a product mnemonic for this product
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.RoundPrice(System.Double)">
            <summary>
            Round a price to the correct number of places
            </summary>
            <param name="myPrice"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.From(KAI.kaitns.Product,System.Boolean)">
            <summary>
            Load from a databinding
            </summary>
            <param name="myDef"></param>
            <param name="myLoadUnderlying"> if true load any underlying products</param>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.ToDataBinding">
            <summary>
            Store on a databinding
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.Set(QuickFix.Message)">
            <summary>
            Set fields from a quickfix message
            </summary>
            <param name="myMsg"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.From(QuickFix.Message)">
            <summary>
            write product information on a quickfix message
            </summary>
            <param name="myMsg"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TradableProduct.ApplyUpdate(KaiTrade.Interfaces.PXUpdate)">
            <summary>
            Apply a price update to the product
            </summary>
            <param name="update"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.Identity">
            <summary>
            Return my identity
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.SyntheticPriceCalcName">
            <summary>
            get/set the name of the price calcualtion to use on legs - if needed
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.Legs">
            <summary>
            Get/Set a list of product legs
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.Tag">
            <summary>
            get/set a user defined tag
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.LongName">
            <summary>
            get/set product long name
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.Mnemonic">
            <summary>
            get/set product Mnemonic
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.GenericName">
            <summary>
            get/set Generic name for the product, this is driver specific
            for example in CQG EP refers to the current eMini contract
            
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.DriverID">
            <summary>
            Get/Set the driver ID used for this product - an empty string 
            implies no specific adapter
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.TradeVenue">
            <summary>
            get/set the trade venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.TradeVenueSequence">
            <summary>
            This is assigned by the trade venue when a product request returns a
            sequence of products - it is not persited. The use of this property is for the
            driver - do not change elsewhere
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.BrokerService">
            <summary>
            The broker service - is used by adapters to determine a service within 
            a particular venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.Exchange">
            <summary>
            Exchange listing the product - LSE, CME etc
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.ExDestination">
            <summary>
            Execution destination as defined by institution when order is entered - for example SMART for IB
            contrast with SecurityExchange where the product is listed
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.Symbol">
            <summary>
            Broker assigned symbol for the product
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.Commodity">
            <summary>
            Commodity that this product (contract) belongs to
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.StrikePrice">
            <summary>
            Product strike price - used for options
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.MMY">
            <summary>
            Contract date used for futures and options
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.CFICode">
            <summary>
            CFI Code (see Fixprotocol spec) used to indicate the type of product(Stock, Future, option etc)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.SecurityID">
            <summary>
            Alternative ID for the security, ISIN, Reuter code, CUSIP etc see IDSource for type of symbol
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.IDSource">
            <summary>
            Type of Security ID - see fix spec for valid values 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.Currency">
            <summary>
            Currency that the product is traded in 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.PriceFormat">
            <summary>
            Price format of the product eg decimal, int, 1/32, 1/64
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.TickSize">
            <summary>
            Product TickSize
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.TickValue">
            <summary>
            Product TickValue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.NumberDecimalPlaces">
            <summary>
            return the number of decimal places
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.PriceFeedQuantityMultiplier">
            <summary>
            A multiplier applied to qty (Bid/Offer..) received from the venue
            for example for IB this should be 100 for stocks
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.ContractSize">
            <summary>
            Product Contract Size
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.QtyIncrement">
            <summary>
            Product quantity increment size/ change size
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.Publisher">
            <summary>
            Get/Set the price publisher associated with the product
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.ApplyPxUpdate">
            <summary>
            Add handler for PXUpdates - local in process use only.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.DepthLevelCount">
            <summary>
            get set the defult number of depth levels for this product
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradableProduct.L1PX">
            <summary>
            Get an Level 1 price interface for this product
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.ProductData">
            <summary>
            Used as WCF data contract - this is used to avoid the quickfix dependancies on the main product
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductData.From(KaiTrade.Interfaces.TradableProduct)">
            <summary>
            set this up from a tradeable product
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.ProductData.To(KaiTrade.Interfaces.TradableProduct)">
            <summary>
            Set up the properties of a tradeble product from this
            </summary>
            <param name="p"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.Identity">
            <summary>
            Return my identity
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.SyntheticPriceCalcName">
            <summary>
            get/set the name of the price calcualtion to use on legs - if needed
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.Tag">
            <summary>
            get/set a user defined tag
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.LongName">
            <summary>
            get/set product long name
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.Mnemonic">
            <summary>
            get/set product Mnemonic
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.GenericName">
            <summary>
            get/set Generic name for the product, this is driver specific
            for example in CQG EP refers to the current eMini contract
            
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.DriverID">
            <summary>
            Get/Set the driver ID used for this product - an empty string 
            implies no specific adapter
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.TradeVenue">
            <summary>
            get/set the trade venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.BrokerService">
            <summary>
            The broker service - is used by adapters to determine a service within 
            a particular venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.Exchange">
            <summary>
            Exchange listing the product
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.ExDestination">
            <summary>
            Execution destination as defined by institution when order is entered
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.Symbol">
            <summary>
            Broker assigned symbol for the product
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.Commodity">
            <summary>
            Commodity that this product (contract) belongs to
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.StrikePrice">
            <summary>
            Product strike price - used for options
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.MMY">
            <summary>
            Contract date used for futures and options
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.CFICode">
            <summary>
            CFI Code (see Fixprotocol spec) used to indicate the type of product(Stock, Future, option etc)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.SecurityID">
            <summary>
            Alternative ID for the security, ISIN, Reuter code, CUSIP etc see IDSource for type of symbol
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.IDSource">
            <summary>
            Type of Security ID - see fix spec for valid values 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.Currency">
            <summary>
            Currency that the product is traded in 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.TickSize">
            <summary>
            Product TickSize
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.TickValue">
            <summary>
            Product TickValue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.NumberDecimalPlaces">
            <summary>
            return the number of decimal places
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.PriceFeedQuantityMultiplier">
            <summary>
            A multiplier applied to qty (Bid/Offer..) received from the venue
            for example for IB this should be 100 for stocks
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.ContractSize">
            <summary>
            Product Contract Size
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.QtyIncrement">
            <summary>
            Product quantity increment size/ change size
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ProductData.DepthLevelCount">
            <summary>
            get set the defult number of depth levels for this product
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.Trade">
            <summary>
            Represents a trade record - based on an Execution report 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Trade.CorrelationID">
            <summary>
            Identifier used to track a trade system use of orders, strategeies and algos against some
            ID
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TradeLimits">
            <summary>
            Defines trade limits applied within KaiTrade when routing orders
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TradeLimits.FromXML(System.String)">
            <summary>
            Set values from a string of XML
            </summary>
            <param name="myXML"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TradeLimits.ToXML">
            <summary>
            Return values as a string of XML
            </summary>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeLimits.MaxOrderSize">
            <summary>
            Max size allowed on an individual order
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeLimits.MaxOrderConsideration">
            <summary>
            Max consideration (qty*price) allowed on an individual order
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeLimits.MaxSize">
            <summary>
            Max size allowed to be submitted in a given KaiTrade session
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeLimits.MaxConsideration">
            <summary>
            Max Consideration in a given given KaiTrade session
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeLimits.MaxMessages">
            <summary>
            Max number of messages/iterations in a particular run of an Algo
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TradeSystem">
            <summary>
            This interface describes a generic trade system, that will be associated with some
            external system/broker
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TradeSystem.AddSystemTrade(KaiTrade.Interfaces.SystemTrade)">
            <summary>
            Add a system trade
            </summary>
            <param name="systemTrade"></param>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSystem.ID">
            <summary>
            Unique ID for the system
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSystem.Name">
            <summary>
            Freindly name of the system
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSystem.Venue">
            <summary>
            Name of the venue that trading system runs on
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TradeSystem.SystemTrades">
            <summary>
            List of system trades that can be made by the trading system
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.SystemTrade">
            <summary>
            This defines a system trade- note that 
            that a trading systems supports 1..N system trades e.g. GoLong,  GoShort
            each of these trades can have one or more exits
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SystemTrade.TradeName">
            <summary>
            Name of system trade - this name will be used as an entry trigger
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SystemTrade.Side">
            <summary>
            Side of trade
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SystemTrade.OrdType">
            <summary>
            Order Type
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.SystemTrade.ExitTrades">
            <summary>
            The list of exit trades that can be used by this system trade
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.ExitTrade">
            <summary>
            This defines an exit trade made by some trading system
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ExitTrade.ExitTradeName">
            <summary>
            Name of system trade  - will be in the Name on a trade signal and used as an exit trigger
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ExitTrade.Side">
            <summary>
            Side of trade
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.ExitTrade.OrdType">
            <summary>
            Order Type
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.Transaction">
            <summary>
            Provide an interface for simple transactions, for example
            appling an execution report to an order
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Transaction.StartUpdate">
            <summary>
            Indicates that a set of updates will be applied
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Transaction.EndUpdate">
            <summary>
            Indicates that a set of updates have been completed
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TriggeredOrder">
            <summary>
            Defines the interface some type of triggered order must impliment, these orders are used like normal
            orders but with some extended order type KSTOP, KHELD, KTRAILINGSTOP etc
            These extended orders are implimented in external assemblied dynamic ally loaded into KaiTrade
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TriggeredOrder.PriceSignal(System.Double,System.Double)">
            <summary>
            Signal new prices to the trigger
            </summary>
            <param name="bidPrice"></param>
            <param name="askPrice"></param>
            <returns>true - if the trigger fires, false if not fired</returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TriggeredOrder.Cancel">
            <summary>
            Cancel the tiggered order, will cancel any running order and set the order to cancelled
            the system will then exclude the order from being triggers
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TriggeredOrder.ID">
            <summary>
            The identity of this order trigger
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TriggeredOrder.ExtraParameters">
            <summary>
            Extra paramters that can be used with this triggered order 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TriggeredOrder.TriggerPx">
            <summary>
            price that the tigger is called
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TriggeredOrder.TriggerPxOffset">
            <summary>
            Offset to a trigger px used when sending orders, where a
            set of traded is done over time
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TriggeredOrder.TriggerType">
            <summary>
            Trigger type for the order
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TriggeredOrder.TriggerState">
            <summary>
            Trigger state for the order
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TriggeredOrder.OrderType">
            <summary>
            Order type to use when order is triggered
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TriggeredOrder.OrderIdentifier">
            <summary>
            ID of the order we will trigger
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TriggeredOrder.HeldQty">
            <summary>
            Get set the held qty - i.e. the amount still to be sent to the market
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TriggeredOrderManager.Create(KaiTrade.Interfaces.Order,System.String,System.String,System.Collections.Generic.List{KaiTrade.Interfaces.K2Parameter})">
            <summary>
            Create a triggered order based on the order passed in
            </summary>
            <param name="order">order used to create thge triggered order</param>
            <param name="OrderType">incomming order type KSTOP, KTARGET or KHELD</param>
            <param name="targetOrderType">order type to be used when submitting the order</param>
            <param name="parms">extra parameters to use with the triggered order</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TriggeredOrderManager.Get(System.String)">
            <summary>
            Get a triggered order based on its ID
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TriggeredOrderManager.Add(KaiTrade.Interfaces.TriggeredOrder)">
            <summary>
            Add an order to the set of triggered order under management
            </summary>
            <param name="?"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TriggeredOrderManager.Add(System.String,KaiTrade.Interfaces.TriggeredOrder)">
            <summary>
            Add an order to the set of triggered order under management, use the mnemonic
            specified as a prices source for the trigger
            </summary>
            <param name="mnemonic"></param>
            <param name="?"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TriggeredOrderManager.Remove(KaiTrade.Interfaces.TriggeredOrder)">
            <summary>
            remove the triggered order from the list we monitor
            </summary>
            <param name="triggeredOrder"></param>
        </member>
        <member name="T:KaiTrade.Interfaces.TSFormat">
            <summary>
            Defines the format of the expression - Native 
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TSExpression">
            <summary>
            Identifies some expression use to get 
            time series data from a provider
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSExpression.Format">
            <summary>
            Get/Set the format of this expression
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSExpression.Expression">
            <summary>
            Some expression to be evaluated by the driver or provider
            of TS data
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSExpression.Alias">
            <summary>
            Allias used to identify the result of some expression - e.g. for RTD
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSExpression.BaseExpression">
            <summary>
            Name of the Base expression/alg/calc to be used
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSExpression.StatExpression">
            <summary>
            Expression alg or calculation used to evaluate this expression
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TSItem">
            <summary>
            Defines an item of data based on some products history e.g
            bars, studies, conditions, trade systems - these items contain
            data based on some defined slices for example time(sec, min,..) 
            or constant volumes of trades the type of slices is determined
            by the container typically a TSSet
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TSItem.GetCurveNames">
            <summary>
            Get a list of curve names
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSItem.GetUDCurveValue(System.Int32)">
            <summary>
            get an user defined aribitary double value by index
            </summary>
            <param name="myIndex"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSItem.SetUDCurveValue(System.Int32,System.Double)">
            <summary>
            Set an user defined double value by index
            </summary>
            <param name="myIndex"></param>
            <param name="myValue"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSItem.ResetUDValues">
            <summary>
            Reset the User  defined values to 0
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TSItem.ToDataBinding">
            <summary>
            render as XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSItem.From(KAI.kaitns.TSDataItem)">
            <summary>
            set state from xml
            </summary>
            <param name="myDB"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSItem.ToTabSeparated">
            <summary>
            Return a string of Tab separated data good for Excel
            </summary>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.Index">
            <summary>
            index in the set - returned by the broker
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.StrategyID">
            <summary>
            The ID of a strategy that this TS Item is associated with, this is used to provide
            support for Trading systems, Signals and conditons
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.TimeStamp">
            <summary>
            time stamp when the item was added or updates
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.AskVolume">
            <summary>
            AskVolume  - see Volume for total
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.BidVolume">
            <summary>
            Bid Volume - see Volume for total
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.Volume">
            <summary>
            Total volume Bid+offer for the bar
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.LastBar">
            <summary>
            Indicates if this is the last bar of some resultset
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.UpDownCount">
            <summary>
            up or down (-ve) count of the lastpx
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.ConditionName">
            <summary>
            set a condition name specific
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.ConditionValue">
            <summary>
            get the condition value
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.CustomValues">
            <summary>
            Used to return any custom values for the bar as name value pairs
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.Signals">
            <summary>
            A list of trade signals that may be associated with this TS data item
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSItem.Tag">
            <summary>
            Store a user defined tag
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TSQueryGroup">
            <summary>
            This is used to manage a group of TS Data sets, an application can have many TSQueryGroups, each
            group will have 1 or more TS datasets. The group allows the user to access these at a higher level
            for example to get the data, load/store and so on
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TSQueryGroup.FromXml(System.String)">
            <summary>
            Set up a TS Query group from XML
            </summary>
            <param name="myXML"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSQueryGroup.FromXmlDB(KAI.kaitns.TSQueryGroup)">
            <summary>
            Set up group from XMLDB
            </summary>
            <param name="myDB"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSQueryGroup.GetXML">
            <summary>
            Store a query group as XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSQueryGroup.GetXMLDB">
            <summary>
            Get XML databinding object
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSQueryGroup.SetInterval(System.Int32)">
            <summary>
            This will override the intraday interval used in individual queries
            </summary>
            <param name="myInterval"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSQueryGroup.addSubscriber(KaiTrade.Interfaces.Subscriber)">
            <summary>
            Add a subscriber to the query group - any sets that have a publisher interface 
            will be subscribed to
            </summary>
            <param name="mySubscriber"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSQueryGroup.UnSubscribe(KaiTrade.Interfaces.Subscriber)">
            <summary>
            Unsubscribe to the  to the query group - any sets that have a publisher interface 
            will be unsubscribed
            </summary>
            <param name="mySubscriber"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSQueryGroup.GetData(KaiTrade.Interfaces.Facade)">
            <summary>
            Get the data for all sets in the group using the facade passed in
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TSQueryGroup.StopData(KaiTrade.Interfaces.Facade)">
            <summary>
            Stop any data updates for the sets in use
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSQueryGroup.Name">
            <summary>
            Get/Set the group name
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSQueryGroup.StrategyName">
            <summary>
            ID of the strategy that this set is related to (if any)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSQueryGroup.Status">
            <summary>
            Get the status of a group of set - this will show
            the most severe error state of any of the groups sets
            open implies all are open 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSQueryGroup.Mnemonic">
            <summary>
            will set the mnemonic that used for all members of a query set
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSQueryGroup.Items">
            <summary>
            get/set list of TS Sets
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TSUpdate">
            <summary>
            Provides a closely coupled update for clients of the set - note that
            tssets usually act as a conventional publisher and the regular
            publisher function will support wider distribution of data
            </summary>
            <param name="mySet"></param>
        </member>
        <member name="T:KaiTrade.Interfaces.TSAdded">
            <summary>
            Provides a closely coupled update for clients of the set - note that
            tssets usually act as a conventional publisher and the regular
            publisher function will support wider distribution of data
            Called when a bar is added to the set
            </summary>
            <param name="mySet"></param>
        </member>
        <member name="T:KaiTrade.Interfaces.TSStatus">
            <summary>
            Provides a closely coupled update for clients of the set - note that
            tssets usually act as a conventional publisher and the regular
            publisher function will support wider distribution of data
            </summary>
            <param name="mySet"></param>
        </member>
        <member name="T:KaiTrade.Interfaces.TSPeriod">
            <summary>
            Defines periods used when requesting historic bar data (or conditions)
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TSRangeType">
            <summary>
            Defines the range type being used
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TSVolumeType">
            <summary>
            the volume type used on constant volume queries
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TSType">
            <summary>
            Defines the query types available
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TSSet">
            <summary>
            Set of time based data, bars, expressions, conditions and custom studies and the properties
            needed to make request
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.CreateExpression">
            <summary>
            Create an empty expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.AddItem(KaiTrade.Interfaces.TSItem)">
            <summary>
            Add a individual bar to the set
            </summary>
            <param name="myTSItem"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.ReplaceItem(KaiTrade.Interfaces.TSItem,System.Int32)">
            <summary>
            Replace a bar in the set of bars
            </summary>
            <param name="myTSItem"></param>
            <param name="myIndex"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.GetItem(System.Int32)">
            <summary>
            get a bar item 
            </summary>
            <param name="myIndex"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.SubscribeBaseMnemonic">
            <summary>
            Subscribe to the base mnemonic's price updates - this can be used
            in connection with the price agregator to build up a set of bars
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.GetUDCurveValue(System.Int32)">
            <summary>
            Gets a user defined curve current value - note that history may be held in the item set
            </summary>
            <param name="myIndex"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.SetUDCurveValue(System.Int32,System.Double)">
            <summary>
            Sets a user defined curve current value  
            </summary>
            <param name="myIndex"></param>
            <param name="myValue"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.GetUDCurveName(System.Int32)">
            <summary>
            Get the name of the user defined data for a given index
            </summary>
            <param name="myIndex"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.SetUDCurveName(System.Int32,System.String)">
            <summary>
            Set the name for a user defined value at an index
            </summary>
            <param name="myIndex"></param>
            <param name="myValue"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.ApplyPriceUpdate(KaiTrade.Interfaces.PXUpdate)">
            <summary>
            Apply a simple price update to the TSSet - if a price aggregator is set then
            the set may add bars and call other routines
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.Reset">
            <summary>
            Reset all data - will delete all the sets data
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.ResetUDValues">
            <summary>
            Reset the User  defined values to 0
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.ResolveExpressions">
            <summary>
            Get the calc/algs needed to process the TSSet expressions - use for
            KaiTrade internal expression processing
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.EvaluateExpressions">
            <summary>
            Cause all expressions to be evaluated on the current set of data
            used by the proccess updating the raw data in the set
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.GetNewItem">
            <summary>
            Get a new empty time series item
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.ToDataBinding">
            <summary>
            Render all data as xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.From(KAI.kaitns.TSDataSet)">
            <summary>
            read all data from xml
            </summary>
            <param name="myDB"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.ToTabSeparated">
            <summary>
            Return a string of Tab separated data good for Excel
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.AddPatternMatcher(KaiTrade.Interfaces.PatternMatcher)">
            <summary>
            Add a pattern matcher to the list of matcher in the set
            </summary>
            <param name="myMatcher"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSet.StartTestMode(System.Int32,System.Int32)">
            <summary>
            Switch the set into test mode - the set will replay all the
            data as updates 1 per period entered
            </summary>
            <param name="myWaitTime">period between updates in ms</param>
            <param name="setSize">size of set exposed to clients - must be smaller than the original number of bars</param>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.Identity">
            <summary>
            KaiTrade unique ID
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.Name">
            <summary>
            Get set name used in publishing
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.RequestID">
            <summary>
            client request id that is associated with this set.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.Alias">
            <summary>
            Alias name will be used to publish - in particular for CQG Expressions
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.TSUpdate">
            <summary>
            Called on Set updates
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.TSAdded">
            <summary>
            Called when an item(bar) is added
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.TSStatus">
            <summary>
            Called when Status changes
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.StrategyName">
            <summary>
            ID of the strategy that this set is related to (if any)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.AutoCreateStrategy">
            <summary>
            Used to determine if a named strategy can be breated automatically
            or if it must already exist before the TSSet can use it.
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.TriggerPublisher">
            <summary>
            Publisher used to publising trigger results e.g. a CQG Condition
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.TSType">
            <summary>
            Get/Set the type of data requested
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.TSSessionFlags">
            <summary>
            get/set the session flags
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.TSSessionFilter">
            <summary>
            CQG Specific - see CQG for doc 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.ExternalID">
            <summary>
            Identifier provided by external system if any
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.ExternalRef">
            <summary>
            Reference of an external object e.g. from the providers API - should be only used by the system
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.Tag">
            <summary>
            user defined tag
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.PriceAgregator">
            <summary>
            Get/Set the price agregator associated with the set if any
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.Items">
            <summary>
            Data items/bars
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.CurrentItem">
            <summary>
            get the current item being updated - the current bar
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.LastCompleteItem">
            <summary>
            get the last complete bar - the one before the currenty updating top bar
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.ConditionName">
            <summary>
            Get/Set a condition/trigger name 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.StudyName">
            <summary>
            Get set a cutome study name
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.Mnemonic">
            <summary>
            Get/Set the mnemonic that the data will be based on
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.SetHigh">
            <summary>
            Get the set High - high of all the bars
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.SetLow">
            <summary>
            Get set's low  - low value of the bars
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.SetOpen">
            <summary>
            Get the open price for the set
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.SetClose">
            <summary>
            Get the close for the set
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.LastUpdate">
            <summary>
            Get the last update the set had
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.Status">
            <summary>
            Get/Set the status of a TSSet stricktly speaking this
            is only set by the provider of information e.g. CQG
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.Period">
            <summary>
            Time period of data held
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.RangeType">
            <summary>
            Type of range
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.DateTimeStart">
            <summary>
            time to start - depends on RangeType
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.DateTimeEnd">
            <summary>
            Time to end- depends on RangeType
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.IntStart">
            <summary>
            interval in items start
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.IntEnd">
            <summary>
            Interval in items end 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.IntraDayInterval">
            <summary>
            type of interval 1sec, 2 sec...
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.UpdatesEnabled">
            <summary>
            Set to true if updates are required else a snapshot is returned
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.Updated">
            <summary>
            Determines if the set has been updated
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.Text">
            <summary>
            arbitary text - info about the request
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.VolumeLevel">
            <summary>
            Get/Set the volume level for constant volume bars
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.IncludeFlatTicks">
            <summary>
            Get/Set include flat ticks
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.VolumeType">
            <summary>
            get/set the volume type used on a constant volume query
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.TimeStamp">
            <summary>
            Time stamp of an update
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.ReportAll">
            <summary>
            Set to true if all changes are to be reported rather than just bars added
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.UseCurrentBar">
            <summary>
            Determines if the current bar will be used for updates - with CQG the current bar can 
            have undefined data - e.g. until an intrabar update is received. If this is false then 
            data in images will be from the last complete bar
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.Expressions">
            <summary>
            Get/Set the list of expressions
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.TSSet.PatternMatchers">
            <summary>
            get/set the list of pattern matchers
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.TSSetManager">
            <summary>
            Used to manage time series datasets
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSetManager.CreateTSQueryGroup">
            <summary>
            Create a TS Query Group
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSetManager.CreateTSSet">
            <summary>
            Create and register an empty time series data set
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSetManager.GetTSSet(System.String)">
            <summary>
            Get a time series set based on its ID
            </summary>
            <param name="myID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSetManager.GetTSSetWithAlias(System.String)">
            <summary>
            Get a time series set based on its Alias
            </summary>
            <param name="myID"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.TSSetManager.GetAliasList">
            <summary>
            Get a list of allias in the maanger
            </summary>
            <returns></returns>
        </member>
        <member name="T:KaiTrade.Interfaces.User">
            <summary>
            Interface of an object representing a KaiTrade user
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.User.ID">
            <summary>
            Get the unique identifer for the user allocated by the system
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.User.UserID">
            <summary>
            Get set some user id(name) used to sign on
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.User.UserPwd">
            <summary>
            Users password
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.User.Enabled">
            <summary>
            Is the user enabled
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.User.K2Config">
            <summary>
            Get/Set the users K2 config, determines access, servcies, plugings and drivers
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.UserManager.CreateUser(System.String,System.String)">
            <summary>
            Create an empty user, validate their credentials and  register it in the manager
            </summary>
            <param name="userID">user signonid</param>
            <param name="userPwd">user password</param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.UserManager.GetUserIDs">
            <summary>
            Get a list of user IDs
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.UserManager.GetUser(System.String)">
            <summary>
            Get a user given their unique ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.UserManager.GetUserWithSignon(System.String,System.String)">
            <summary>
            Get a user Id using their signon
            </summary>
            <param name="myUserID"></param>
            <returns></returns>
        </member>
        <member name="P:KaiTrade.Interfaces.UserManager.Proxy">
            <summary>
            Set the proxy to be used on webservcies
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.UserOptionsManager">
            <summary>
            Define the interface for a user options manager - keeps various user settings under control
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.UserOptionsManager.Load(System.String)">
            <summary>
            Load the data in the user settings manager from a file
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.UserOptionsManager.Save(System.String)">
            <summary>
            Save User Settings into a file
            </summary>
            <param name="myFilePath"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.UserOptionsManager.Save">
            <summary>
            Save on the current file path (or default file path)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.UserOptionsManager.TradeLimits">
            <summary>
            Get the Trade limits
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.UserOptionsManager.UserOptions">
            <summary>
            Get/Set user options databinding
            </summary>
            <returns></returns>
        </member>
        <member name="T:KaiTrade.Interfaces.Venue">
            <summary>
            This defines a trade venue that provides execution through some API
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.Venue.FromXMLDB(KAI.kaitns.Venue)">
            <summary>
            Set the venue up from a databinding
            </summary>
            <param name="myVenue"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.Venue.ToXMLDB">
            <summary>
            Write to an xml databinding
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.Name">
            <summary>
             long name for the venue - for display purposes
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.Code">
            <summary>
            Code used to ID the venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.TargetVenue">
            <summary>
            Target venue - when a trade venue simply routes messages
            this is the actual venue they want it to trade on
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.DataFeedVenue">
            <summary>
            If specified the venue used to get data (realtime and historic) for
            intruments in this venue - used when a venue only provides order routing
            and a separate venue is used to get prices
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.DriverCode">
            <summary>
            Driver code that gets messages for this venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.BeginString">
            <summary>
            FIX Begin string - used for FIX Driver
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.SID">
            <summary>
            FIX Sender compID - used for FIX Driver
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.TID">
            <summary>
            FIX Target comp ID - used for FIX Driver
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.AccountNumber">
            <summary>
            Account number used for orders on this venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.NOSBag">
            <summary>
            A bag of delimited fields that will be added to new order single 
            message 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.CancelBag">
            <summary>
            A bag of delimited  fields that will be added to cancel order message 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.ReplaceBag">
            <summary>
            A bag of  delimited  fields that will be added to replace order message 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.DefaultCurrencyCode">
            <summary>
            get/set the default currency code
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.DefaultSecurityExchange">
            <summary>
            get/set the default security exchange for this venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.DefaultCFICode">
            <summary>
            get/set the default CFICode(product type)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.Venue.UseSymbol">
            <summary>
            If set then a product id (srcid) is used as a symbol - for venues that just use a symbol code
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.VenueData">
            <summary>
            This defines a trade venue data object that provides execution through some API
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.Name">
            <summary>
             long name for the venue - for display purposes
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.Code">
            <summary>
            Code used to ID the venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.TargetVenue">
            <summary>
            Target venue - when a trade venue simply routes messages
            this is the actual venue they want it to trade on
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.DataFeedVenue">
            <summary>
            If specified the venue used to get data (realtime and historic) for
            intruments in this venue - used when a venue only provides order routing
            and a separate venue is used to get prices
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.DriverCode">
            <summary>
            Driver code that gets messages for this venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.BeginString">
            <summary>
            FIX Begin string - used for FIX Driver
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.SID">
            <summary>
            FIX Sender compID - used for FIX Driver
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.TID">
            <summary>
            FIX Target comp ID - used for FIX Driver
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.AccountNumber">
            <summary>
            Account number used for orders on this venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.NOSBag">
            <summary>
            A bag of delimited fields that will be added to new order single 
            message 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.CancelBag">
            <summary>
            A bag of delimited  fields that will be added to cancel order message 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.ReplaceBag">
            <summary>
            A bag of  delimited  fields that will be added to replace order message 
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.DefaultCurrencyCode">
            <summary>
            get/set the default currency code
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.DefaultSecurityExchange">
            <summary>
            get/set the default security exchange for this venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.DefaultCFICode">
            <summary>
            get/set the default CFICode(product type)
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.VenueData.UseSymbol">
            <summary>
            If set then a product id (srcid) is used as a symbol - for venues that just use a symbol code
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.VenueManager">
            <summary>
            Define the interface that a venue manager must support
            A venue manage provides additonal configuration for some 
            connection we can trade over
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.VenueManager.AddVenue(System.String,KAI.kaitns.Venue)">
            <summary>
            Add a venue based on its XML databinding
            </summary>
            <param name="myCode"></param>
            <param name="myVenue"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.VenueManager.GetVenue(System.String)">
            <summary>
            Get a venue object given its venue code
            </summary>
            <param name="myCode"></param>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.VenueManager.GetVenueList">
            <summary>
            Get a list of all the venues
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaiTrade.Interfaces.VenueManager.GetVenueDefinition">
            <summary>
            Get a list of all the venue definition databindings
            </summary>
            <returns></returns>
        </member>
        <member name="T:KaiTrade.Interfaces.IVenueTradeDestination">
            <summary>
            Defines some trading destination available through a particular trade venue
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IVenueTradeDestination.VenueCode">
            <summary>
            Trade venue supporting this destination
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IVenueTradeDestination.ExchangeCode">
            <summary>
            Exchange code for all the products listed example LSE, CME...
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IVenueTradeDestination.ExDestination">
            <summary>
            Default ExDestination for the products - for example SMART for IB
            </summary>
        </member>
        <member name="P:KaiTrade.Interfaces.IVenueTradeDestination.PrimaryCFICode">
            <summary>
            Primary asset class for the destination for example FXXXXX(Futures)
            </summary>
        </member>
        <member name="T:KaiTrade.Interfaces.WindowManager">
            <summary>
            Provides general access to all the windows/views displayed in the system
            </summary>
        </member>
        <member name="M:KaiTrade.Interfaces.WindowManager.MakeVisible(System.String)">
            <summary>
            Make some window in the docking manager visible
            </summary>
            <param name="myTitle"></param>
        </member>
        <member name="M:KaiTrade.Interfaces.WindowManager.GetWindowControl(System.String)">
            <summary>
            Get the control in some docking manager content window
            used to access user controls displayed by the manager
            </summary>
            <param name="myTitle"></param>
            <returns></returns>
        </member>
    </members>
</doc>
