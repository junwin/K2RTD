//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace K2BaseSvrClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KTAMessage", Namespace="http://schemas.datacontract.org/2004/07/KTARemote")]
    [System.SerializableAttribute()]
    public partial class KTAMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long m_AppSpecificField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int m_AppStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_AppTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_ClientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_ClientSubIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_CorrelationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_CreationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_FormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_LabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_TagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_TargetIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_TargetSubIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_VenueCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long m_AppSpecific {
            get {
                return this.m_AppSpecificField;
            }
            set {
                if ((this.m_AppSpecificField.Equals(value) != true)) {
                    this.m_AppSpecificField = value;
                    this.RaisePropertyChanged("m_AppSpecific");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int m_AppState {
            get {
                return this.m_AppStateField;
            }
            set {
                if ((this.m_AppStateField.Equals(value) != true)) {
                    this.m_AppStateField = value;
                    this.RaisePropertyChanged("m_AppState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_AppType {
            get {
                return this.m_AppTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.m_AppTypeField, value) != true)) {
                    this.m_AppTypeField = value;
                    this.RaisePropertyChanged("m_AppType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_ClientID {
            get {
                return this.m_ClientIDField;
            }
            set {
                if ((object.ReferenceEquals(this.m_ClientIDField, value) != true)) {
                    this.m_ClientIDField = value;
                    this.RaisePropertyChanged("m_ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_ClientSubID {
            get {
                return this.m_ClientSubIDField;
            }
            set {
                if ((object.ReferenceEquals(this.m_ClientSubIDField, value) != true)) {
                    this.m_ClientSubIDField = value;
                    this.RaisePropertyChanged("m_ClientSubID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_CorrelationID {
            get {
                return this.m_CorrelationIDField;
            }
            set {
                if ((object.ReferenceEquals(this.m_CorrelationIDField, value) != true)) {
                    this.m_CorrelationIDField = value;
                    this.RaisePropertyChanged("m_CorrelationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_CreationTime {
            get {
                return this.m_CreationTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.m_CreationTimeField, value) != true)) {
                    this.m_CreationTimeField = value;
                    this.RaisePropertyChanged("m_CreationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_Data {
            get {
                return this.m_DataField;
            }
            set {
                if ((object.ReferenceEquals(this.m_DataField, value) != true)) {
                    this.m_DataField = value;
                    this.RaisePropertyChanged("m_Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_Format {
            get {
                return this.m_FormatField;
            }
            set {
                if ((object.ReferenceEquals(this.m_FormatField, value) != true)) {
                    this.m_FormatField = value;
                    this.RaisePropertyChanged("m_Format");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_Label {
            get {
                return this.m_LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.m_LabelField, value) != true)) {
                    this.m_LabelField = value;
                    this.RaisePropertyChanged("m_Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_Tag {
            get {
                return this.m_TagField;
            }
            set {
                if ((object.ReferenceEquals(this.m_TagField, value) != true)) {
                    this.m_TagField = value;
                    this.RaisePropertyChanged("m_Tag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_TargetID {
            get {
                return this.m_TargetIDField;
            }
            set {
                if ((object.ReferenceEquals(this.m_TargetIDField, value) != true)) {
                    this.m_TargetIDField = value;
                    this.RaisePropertyChanged("m_TargetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_TargetSubID {
            get {
                return this.m_TargetSubIDField;
            }
            set {
                if ((object.ReferenceEquals(this.m_TargetSubIDField, value) != true)) {
                    this.m_TargetSubIDField = value;
                    this.RaisePropertyChanged("m_TargetSubID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_UserID {
            get {
                return this.m_UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.m_UserIDField, value) != true)) {
                    this.m_UserIDField = value;
                    this.RaisePropertyChanged("m_UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_VenueCode {
            get {
                return this.m_VenueCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.m_VenueCodeField, value) != true)) {
                    this.m_VenueCodeField = value;
                    this.RaisePropertyChanged("m_VenueCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IK2RTDSupport", CallbackContract=typeof(K2BaseSvrClient.ServiceReference1.IK2RTDSupportCallback))]
    public interface IK2RTDSupport {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IK2RTDSupport/GetAccessID", ReplyAction="http://tempuri.org/IK2RTDSupport/GetAccessIDResponse")]
        string GetAccessID(string myAppID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IK2RTDSupport/Register", ReplyAction="http://tempuri.org/IK2RTDSupport/RegisterResponse")]
        void Register(string myAccessID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IK2RTDSupport/ConnectData")]
        void ConnectData(string myAccessID, int TopicID, string[] Strings);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IK2RTDSupport/Log")]
        void Log(string myAccessID, bool isError, string src, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IK2RTDSupport/SubscribeData", ReplyAction="http://tempuri.org/IK2RTDSupport/SubscribeDataResponse")]
        void SubscribeData(string myAccessID, int myID, string myTopicID, string myHeaderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IK2RTDSupport/SubmitOrder", ReplyAction="http://tempuri.org/IK2RTDSupport/SubmitOrderResponse")]
        void SubmitOrder(string myAccessID, int myID, string myTopicID, string myHeaderName, string[] myOrderParms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IK2RTDSupport/PublishTrigger", ReplyAction="http://tempuri.org/IK2RTDSupport/PublishTriggerResponse")]
        void PublishTrigger(string myAccessID, int myID, string myTopicID, string myHeaderName, string[] myTriggerParms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IK2RTDSupport/GPPublishRequest", ReplyAction="http://tempuri.org/IK2RTDSupport/GPPublishRequestResponse")]
        void GPPublishRequest(string myAccessID, int myID, string myTopicID, string myHeaderName, string[] myParms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IK2RTDSupport/HeartBeat", ReplyAction="http://tempuri.org/IK2RTDSupport/HeartBeatResponse")]
        void HeartBeat(string myAccessID, string data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IK2RTDSupport/UnSubscribeData")]
        void UnSubscribeData(string myAccessID, int myID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IK2RTDSupport/Init", ReplyAction="http://tempuri.org/IK2RTDSupport/InitResponse")]
        void Init(string myAccessID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IK2RTDSupport/Finalize")]
        void Finalize(string myAccessID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IK2RTDSupportCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IK2RTDSupport/OnMessage")]
        void OnMessage(K2BaseSvrClient.ServiceReference1.KTAMessage myMsg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IK2RTDSupport/OnTopicUpdate")]
        void OnTopicUpdate(int[] id, string[] value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IK2RTDSupportChannel : K2BaseSvrClient.ServiceReference1.IK2RTDSupport, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class K2RTDSupportClient : System.ServiceModel.DuplexClientBase<K2BaseSvrClient.ServiceReference1.IK2RTDSupport>, K2BaseSvrClient.ServiceReference1.IK2RTDSupport {
        
        public K2RTDSupportClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public K2RTDSupportClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public K2RTDSupportClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public K2RTDSupportClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public K2RTDSupportClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string GetAccessID(string myAppID) {
            return base.Channel.GetAccessID(myAppID);
        }
        
        public void Register(string myAccessID) {
            base.Channel.Register(myAccessID);
        }
        
        public void ConnectData(string myAccessID, int TopicID, string[] Strings) {
            base.Channel.ConnectData(myAccessID, TopicID, Strings);
        }
        
        public void Log(string myAccessID, bool isError, string src, string msg) {
            base.Channel.Log(myAccessID, isError, src, msg);
        }
        
        public void SubscribeData(string myAccessID, int myID, string myTopicID, string myHeaderName) {
            base.Channel.SubscribeData(myAccessID, myID, myTopicID, myHeaderName);
        }
        
        public void SubmitOrder(string myAccessID, int myID, string myTopicID, string myHeaderName, string[] myOrderParms) {
            base.Channel.SubmitOrder(myAccessID, myID, myTopicID, myHeaderName, myOrderParms);
        }
        
        public void PublishTrigger(string myAccessID, int myID, string myTopicID, string myHeaderName, string[] myTriggerParms) {
            base.Channel.PublishTrigger(myAccessID, myID, myTopicID, myHeaderName, myTriggerParms);
        }
        
        public void GPPublishRequest(string myAccessID, int myID, string myTopicID, string myHeaderName, string[] myParms) {
            base.Channel.GPPublishRequest(myAccessID, myID, myTopicID, myHeaderName, myParms);
        }
        
        public void HeartBeat(string myAccessID, string data) {
            base.Channel.HeartBeat(myAccessID, data);
        }
        
        public void UnSubscribeData(string myAccessID, int myID) {
            base.Channel.UnSubscribeData(myAccessID, myID);
        }
        
        public void Init(string myAccessID) {
            base.Channel.Init(myAccessID);
        }
        
        public void Finalize(string myAccessID) {
            base.Channel.Finalize(myAccessID);
        }
    }
}
